[
["index.html", "Geocomputation with R Welcome Development Reproducibility", " Geocomputation with R Robin Lovelace Jakub Nowosad 2017-08-28 Welcome Welcome to geocompr, the website of our forthcoming book with CRC Press. Development Inspired by the bookdown R package we are developing this book in the open. We decided to make the book open source to encourage contributions, ensure reproducibility and provide access to the material as it evolves. We’re developing the book in 3 main phases. We’re in phase 1 and focussed on the first 5 main chapters, which we aim to be complete by September. Drafts of other chapters will be added to this website as the project progresses. The latest version is hosted at robinlovelace.net/geocompr. This website is kept up-to-date thanks to Travis, a continuous integration (CI) service. Travis automatically rebuilds the book and finds bugs by reporting the ‘build status’ after every update. Currently the build is: The version of the book you are reading now was built on 2017-08-28 and was built on Travis. bookdown makes editing a book as easy as editing a wiki. To do so, just click on the ‘edit me’ icon highlighted in the image below. Which-ever chapter you are looking at, this will take you to the source R Markdown file hosted on GitHub. If you have a GitHub account, you’ll be able to make changes there and submit a pull request. If you do not, it’s time to sign-up! To raise an issue about the book’s content (e.g. code not running) or make a feature request, check-out the issue tracker. Reproducibility To reproduce the book, you need a recent version of R and up-to-date packages. The following code should install the required packages: if(!require(devtools)) { install.packages(&quot;devtools&quot;) } devtools::install_github(&quot;robinlovelace/geocompr&quot;) To build the book locally, clone or download the repo and run the following line from the project’s root directory: bookdown::render_book(&quot;index.Rmd&quot;) # to build the book browseURL(&quot;_book/index.html&quot;) # to view it For further details see the book’s GitHub page at Robinlovelace/geocompr. "],
["intro.html", "1 Introduction 1.1 What is geocomputation? 1.2 Why Geocomputation with R? 1.3 Software for geocomputation 1.4 R’s spatial ecosystem 1.5 R’s spatial history 1.6 Exercises", " 1 Introduction This book is about harnessing the power of modern computers to do things with geographic data. It teaches a range of spatial skills, including: reading, writing and manipulating geographic data; making static and interactive maps; and modeling geographic phenomena. By demonstrating how various spatial operations can be linked, in the reproducible ‘code chunks’ that intersperse the prose, the book also shows how these skills support a transparent and thus scientific workflow. Learning how to use the wealth of geospatial ‘tools’ this computational approach enables can be exciting and liberating. However, it is even more liberating to create new tools. By the end of the book you should be able to create new tools in the form of shareable R functions. Over the last few decades a huge amount of work has gone into developing open source software for handling geographic data (see foss4g.org). This means that spatial data analysis is no longer the preserve of those who can afford expensive programs, and the hardware to run them. Anyone can now download high performance spatial libraries on their computer. However, despite the growth of geospatial software that is open source, much of it remains inaccessible, in a form that is scriptable and therefore easily reproducible and ‘computational’. Open source Geographic Information Systems (GIS) such as QGIS (see qgis.org) have greatly reduced the ‘barrier to entry’, but the emphasis of such programs on a Graphical User Interface (GUI) can discourage reproducibility and an emphasis on the code that the Geocomputational approach requires, as discussed in Chapter 13. A major aim of this book is to make geographical data analysis more accessible as part of a reproducible workflow. R is a flexible language that allows access to many spatial software libraries (see section 1.2). Before going into the details of the software, however, it is worth taking a step back and thinking about what we mean by geocomputation. 1.1 What is geocomputation? Geocomputation is a relatively young field with a ~30 year history, dating back to the first conference on the subject in 1996.1 What distinguishes geocomputation from the older quantitative geography, is its emphasis on “creative and experimental” GIS applications (Longley et al. 1998). Additionally, it is also about developing new, research-driven methods (Openshaw and Abrahart 2000): GeoComputation is about using the various different types of geodata and about developing relevant geo-tools within the overall context of a ‘scientific’ approach. But geocomputation and this book teach more than just methods and code: they are about doing “practical work that is beneficial or useful” (Openshaw and Abrahart 2000). Of course, reading this book will give you a solid knowledge of geocomputational methods, and how to use them via the reproducible examples implemented in the code chunks in each chapter. But there is much more. This book aims to teach how to do geocomputation rather than just to think about it. Hence, you should be also able to apply the learned methods and mastered skills to real-world data, for evidence-based analysis in your own areas of interest. Moreover, throughout the book we encourage you to make geographic research more reproducible, scientific and socially beneficial. This book is also part of the movement towards Geographical Information Science (GDS), a more recent concept which incorporates elements of ‘data science’ into GIS. Like Geocomputation, GSD can be defined in terms of its relation with GIS, some of which are outlined in Table 1.1. The focus on reproducibility and a command-line interface in this book is aligned with GDS. Table 1.1: Differences in emphasis between the fields of Geographic Information Systems (GIS) and Geographic Data Science (GDS). Attribute GIS GDS Home disciplines Geography Geography, Computing, Statistics Software focus Graphical User Interface Code Reproduciblility Minimal Maximal While embracing recent developments in the field, we also wanted to pay respects to the wider field of Geography, with its 2000 history (Roller 2010), and the narrower field of Geographic Information System (GIS) (Neteler and Mitasova 2008). Geography has played an important role in explaining and influencing humanity’s relationship with the natural world2 and this book aims to contribute to this so-called ‘Geographic Tradition’ (Livingstone 1992). GIS has become almost synonymous with handling spatial data on a computer, and provides a basis for excellent open source tools which can be accessed from R, as we will see in Chapter 13. The book’s links to older disciplines were reflected in suggested titles for the book: Geography with R and R for GIS. Each has advantages. The former conveys the message that it comprises much more than just spatial data: non-spatial attribute data are inevitably interwoven with geometry data, and Geography is about more than where something is on the map. The latter communicates that this is a book about using R as a GIS, to perform spatial operations on geographic data (Bivand, Pebesma, and Gómez-Rubio 2013). However, the term GIS conveys some connotations (see Table 1.1) which simply fail to communicate one of R’s greatest strengths: its console-based ability to seamlessly switch between geographic and non-geographic data processing, modeling and visualization tasks. By contrast, the term geocomputation implies reproducible and creative programming. Of course, (geocomputational) algorithms are powerful tools that can become highly complex. However, all algorithms are composed of smaller parts. By teaching you its foundations and underlying structure, we aim to empower you to create your own innovative solutions to geographic data problems. 1.2 Why Geocomputation with R? Early geographers used a variety of tools including rulers, compasses and sextants to advance knowledge about the world. However, until John Harrison invented the marine chronometer in the 18th century it had been impossible to determine the exact longitude at sea (‘the longitude problem’). Prior to his invention ships followed for centuries a line of constant latitude making each journey much longer, more expensive and often also more dangerous. Nowadays this seems unimaginable with every smartphone having a GPS receiver at its disposal. And there are a multitude of other sensors measuring the world in real-time (satellites, radar, autonomous cars, citizens, etc.). For instance, an autonomous car could create 100 GB or more per day (see e.g., this article). Equally, earth observation data (satellite imagery) has become so big that it is impossible to analyze the corresponding data with a single computer (see http://r-spatial.org/2016/11/29/openeo.html). Hence, we need computational power, software and related tools to handle and extract the most interesting patterns of this ever-increasing amount of (geo-)data. (Geo-)Databases help with data management, storing and querying such large amounts of data. Through interfaces we can access subsets of these data for further analysis, information extraction and visualization. In this book we treat R as a ‘tool for the trade’ for the latter. R is a multi-platform, open source language for statistical computing and graphics (https://www.r-project.org/). With a wide range of packages R also supports advanced geospatial statistics, modeling and visualization.3. At its core R is an object-oriented, functional programming language (Wickham 2014), and was specifically designed as an interactive interface to other software (Chambers 2016). The latter also includes many ‘bridges’ to a treasure trove of GIS software, geolibraries and functions. It is thus ideal for quickly creating ‘geo-tools’, without needing to master lower level languages (compared to R) such as C, FORTRAN and Java (see section 1.3). This can feel like breaking free from the metaphorical ‘glass ceiling’ imposed by GUI-based proprietary geographic information systems (see Table 1.1 for a definition of GUI). What is more, advanced users might even extend R with the power of other languages (e.g., C++ through Rcpp or Python through reticulate; see also section 1.3). An example showing R’s flexibility with regard to geographic software development is its support for generating interactive maps thanks to leaflet (Cheng, Karambelkar, and Xie 2017). The packages tmap and mapview (Tennekes 2017; Appelhans et al. 2017) are built on and extend leaflet. These packages help overcome the criticism that R has “limited interactive [plotting] facilities” (Bivand, Pebesma, and Gómez-Rubio 2013). The code below illustrates this by generating Figure 1.1. library(leaflet) popup = c(&quot;Robin&quot;, &quot;Jakub&quot;) leaflet() %&gt;% addProviderTiles(&quot;NASAGIBS.ViirsEarthAtNight2012&quot;) %&gt;% addAwesomeMarkers(lng = c(-3, 23), lat = c(52, 53), popup = popup) Figure 1.1: World at night imagery from NASA overlaid by the authors’ approximate home locations to illustrate interactive mapping with R. It would have been difficult to produce Figure 1.1 using R a few years ago, let alone embed the results in an interactive html page (the interactive version can be viewed at robinlovelace.net/geocompr). This illustrates R’s flexibility and how, thanks to developments such as knitr and leaflet, it can be used as an interface to other software, a theme that will recur throughout this book. The use of R code, therefore, enables teaching geocomputation with reference to reproducible examples such as that provided in 1.1 rather than abstract concepts. 1.3 Software for geocomputation R is a powerful tool for geocomptation. However, other languages can be used and it is useful to be aware of these for historical context and to help understand the wider open source geospatial programming ecosystem, of which R is a part. With this motivation in mind the section briefly introduces the languages C++, Java and Python for geocomputation, with reference to R. A natural choice for geocomputation would be C++ since major GIS packages (e.g., GDAL, QGIS, GRASS, SAGA, and even ArcGIS) often rely in great parts on it. This is because well-written C++ can be blazzingly fast, which makes it a good choice for performance-critical applications such as the processing of large spatial data. Usually, people find it harder to learn than Python or R. It is also likely that you have to invest a lot of time to code things that are readily available in R. Therefore, we would recommend to learn R, and subsequently to learn C++ through Rcpp if a need for performance optimization arises. Subsequently, you could even implement geoalgorithms you are missing from the most common desktop GIS with the help of Rcpp4–&gt;]. Java is another important (and versatile) language used in GIScience. For example, the open-source desktop GIS gvSig, OpenJump and uDig are written in Java. There are also many open source add-on libraries available for Java, including GeoTools and the Java Topology Suite.5 Furthermore, many server-based applications use Java including among others Geoserver/Geonode, deegree and 52°North WPS. Java’s object-oriented syntax is similar to C++, however, its memory management is much simpler. Still, it is rather unforgiving regarding class, object and variable declarations forcing you to think about a well-designed programming structure. This is especially useful in large projects with thousands of lines of codes placed in numerous files. Following the write once, run anywhere principle, Java is platform-independent (which is unusual for a compiled programming language). Overall, Java’s compiled language has an excellent performance on large-scale systems making it a suitable candidate for complex architecture projects such as programming a desktop GIS. However, Java is probably less suitable for statistical modeling and visualization compared to Python or R. First and foremost, though you can do data science with Java (Brzustowicz 2017), Java offers much fewer statistical libraries especially when compared with R. Secondly, interpreted languages (such as R and Python) are often easier to write (at the prize of lower performance) than compiled languages (such as Java and C++). Moreover, interpreted languages allow a faster and interactive (line-by-line) code implementation. Finally, R’s native support of data types such as data frames and matrices is especially advantageous when it comes to analyzing data. Lastly, we will introduce Python for geocomputation Many people believe that R and Python are battling for supremacy in the field of data science. This is accompanied by a partly offensive as much as often rather subjective discussion on what to learn or what to use. We believe that both languages have their merits, and in the end it is about doing geocomputation and communicating the corresponding results regardless of the chosen software. Moreover, both languages are object-oriented, and have lots of further things in common. Learning one language should give you a headstart when choosing to learn the other as well. R’s major advantage is that statisticians wrote hundreds of statistical packages (unmatched by Python) explicitly for other statisticians. By contrast, Python’s major advantage is that it is (unlike R) a multi-purpose language thereby bringing together people from diverse fields which also explains Python’s bigger user base compared to R’s. So if you like Python better or you think it better suits your needs (for example because you are also interested in web and GUI development), go for it. In fact, we often advise our students to start with Python just because the major GIS software packages provide Python libraries that lets the user access its geoalgorithms from the Python command line6. However, when the teaching moves on to statistical geoprocessing and spatial predictive modeling we guide them towards R where they can take advantage of the concepts already learned through Python. Nevertheless, you can also use Python for the most common statistical learning techniques (though R tends to be more on the bleeding edge regarding new statistical development including those in the geostatistical community). In addition, Python also offers excellent support for spatial data analysis and manipulation (see packages osgeo, Shapely, NumPy, osgeo, PyGeoProcessing). We refer you to (???) for an introduction to geoprocessing with Python. 1.4 R’s spatial ecosystem Before cracking-on with the action, a few introductory remarks are needed to explain the approach taken here and provide context. There are many ways to handle spatial data in R, with dozens of packages in the area.7 In this book we endeavor to teach the state-of-the-art in the field whilst ensuring that the methods are future-proof. Like many areas of software development, R’s spatial ecosystem is rapidly evolving. Because R is open source, these developments can easily build on previous work, by ‘standing on the shoulders of giants’, as Isaac Newton put it in 1675. This approach is advantageous because it encourages collaboration and avoids ‘reinventing the wheel’. The package sf (covered in Chapter 2), for example, builds on its predecessor sp. A surge in development time (and interest) in ‘R-Geo’ has followed the award of a grant by the R Consortium for the development of support for Simple Features, an open-source standard and model to store and access vector geometries. This resulted in the sf package (covered in 2.1.1). Multiple places reflect the immense interest in sf. This is especially true for the R-sig-Geo Archives, a long-standing open access email list containing much R-spatial wisdom accumulated over the years. Many posts on the list now discuss sf and related packages, suggesting that R’s spatial software developers are using the package and, therefore, it is here to stay. We even propose that the release of sf heralds a new era for spatial data analysis and geocomputation in R. This era8 clearly has the wind in its sails, and is set to dominate future developments in R’s spatial ecosystem for years to come. So time invested in learning the ‘new ways’ of handling spatial data and, hopefully, reading this book, is well spent! Figure 1.2: The popularity of spatial packages in R. The y-axis shows the average number of downloads, within a 30-day rolling window, of R’s top 5 spatial packages, defined as those with the highest number of downloads within the last 30 days. It is noteworthy that shifts in the wider R community, as exemplified by the data processing package dplyr (released in 2014) influenced shifts in R’s spatial ecosystem. Alongside other packages that have a shared style and emphasis on ‘tidy data’ (including e.g., ggplot2), dplyr was placed in the tidyverse ‘metapackage’ in late 2016. The tidyverse approach, with its focus on long-form data and fast, intuitively named functions, has become immensely popular. This has led to a demand for ‘tidy spatial data’ which has been partly met by sf and other approaches such as the GitHub package tabularaster. An obvious feature of the tidyverse is the tendency for packages to work in harmony. Although an equivalent geoverse is presently missing, there is an on-going discussion of harmonizing R’s many spatial packages.9 and a growing number of actively developed packages which are designed to work in harmony with sf (Table 1.2) and Table 1.2: The top 5 most downloaded packages that depend on sf, in terms of average number of downloads per day over the previous month. As of 2017-08-24 there are 25 packages which import sf. package Downloads plotly 1758 leaflet 478 geojsonio 213 mapview 204 rmapshaper 109 1.5 R’s spatial history There are many benefits of using recent packages such as sf, with the caveat that they are generally less stable than mature packages such as its predecessor, the sp-package. The saying “if you live on the cutting edge you risk getting hurt” captures this well, meaning that older packages may be more appropriate for applications requiring stability and backwards-compatibility with other mature packages. Another reason for knowing about the history of geocomputation with R is that there is a wealth of functions, use-cases and teaching material written using older packages in R’s spatial ecosystem, which can still be useful today if you know where to look. The beginnings of spatial capabilities in R are closely connected with its predecessor - the S language (Bivand and Gebhardt 2000). The 1990s saw the development of numerous S scripts and a handful of packages for spatial statistics. Some of these, including spatial, sgeostat and splancs, eventually became R packages (Rowlingson and Diggle 1993; Rowlingson and Diggle 2017; Venables and Ripley 2002; University and Gebhardt 2016). Volume 1/2 of R News (the predecessor of The R Journal) contained an overview of spatial statistical software in R at the time, much of which was based on previous code written for S/S-PLUS (Ripley 2001). This overview described packages for spatial smoothing and interpolation (e.g., akima, spatial, sgeostat and geoR) and point pattern analysis (splancs and spatstat; Akima and Gebhardt 2016; Rowlingson and Diggle 2017; Jr and Diggle 2016). While all these are still available on CRAN, spatstat stands out among them, as it remains dominant in the field of spatial point pattern analysis (Baddeley, Rubak, and Turner 2015). The following R News issue (Volume 1/3) put spatial packages in the spotlight again, with an introduction to splancs and a commentary on future prospects regarding spatial statistics (Bivand 2001). Additionally, the issue introduced two packages for testing spatial autocorrelation that eventually became part of spdep (Bivand 2017). Notably, the commentary mentions the need for standardization of spatial interfaces, efficient mechanisms for exchanging data with GIS, and handling of spatial metadata such as coordinate reference systems (CRS). maptools (written by Nicholas Lewin-Koh; Bivand and Lewin-Koh 2017) is another important package from this time. Initially, maptools just contained a wrapper around shapelib, and permitted the reading of ESRI Shapefiles into geometry nested lists. The corresponding and nowadays obsolete S3 class called “Map” stored this list alongside an attribute data frame. The work on the “Map” class representation was nevertheless important since it directly fed into sp prior to its publication on CRAN. In 2003, Hornik et al. (2003) published an extended review of spatial packages. Around this time the development of R’s spatial capabilities increasingly supported interfaces to external libraries, especially to GDAL and PROJ.4. These interfaces facilitated geographic data I/O (covered in chapter 5) and CRS transformations, respectively. Bivand (2003) proposed a spatial data class system, including support for points, lines, polygons and grids based on GDAL’s support for a wide range of spatial data formats. All these ideas contributed to the packages rgdal and sp, which became the foundational packages for spatial data analysis with R (Bivand, Pebesma, and Gómez-Rubio 2013). rgdal provided GDAL bindings for R which greatly extended R’s spatial capabilities in terms of access to previously unavailable spatial data formats. Initially, Tim Keitt released it in 2003 with support for raster drivers. But soon, rgdal also enabled storing information about coordinate reference system (building on top of the PROJ.4 library), allowed map projections, datum transformations and OGR vector reading. Many of these additional capabilities were thanks to Barry Rowlingson who folded them into the rgdal codebase in March 2006.10 sp, released in 2005, overcame R’s inability to distinguish spatial and non-spatial objects. It grew from a workshop before, and a session at the 2003 DSC conference in Vienna, gathering input from most interested package developers. At the same time, sourceforge was chosen for development collaboration (migrated to R-Forge five years later) and the R-sig-geo mailing list was started. Prior to 2005, spatial coordinates were generally treated as any other number. This changed with sp as it provided generic classes and methods for spatial data. The sophisticated class system supported points, lines, polygons and grids, with and without attribute data. Making use of the S4 class system, sp stores each piece of ‘spatially specific’ information (such as bounding box, coordinate reference system, attribute table) in slots, which are accessible via the @ symbol. For instance, sp-classes store attribute data in the data slot as a data.frame. This enables non-spatial data operations to work alongside spatial operations (covered in chapters 3 and 4, respectively). Additionally, sp implemented generic methods for spatial data types for well-known functions such as summary() and plot() . In the following, sp classes rapidly became the go-to standard for spatial data in R, resulting in a proliferation of packages that depended on it from around 20 in 2008 and over 100 in 2013 (Bivand, Pebesma, and Gómez-Rubio 2013). Now more than 200 packages rely on sp, making it an important part of the R ecosystem. Prominent R packages using sp include: gstat, for spatial and spatio-temporal geostatistics; geosphere, for spherical trigonometry; and adehabitat used for the analysis of habitat selection by animals (Pebesma and Graeler 2017; Calenge 2006; Hijmans 2016a). While rgdal and sp solved many spatial issues, R was still lacking geometry calculation abilities. Therefore, Colin Rundel started to develop a package that interfaces GEOS, an open-source geometry library, during a Google Summer of Coding project in 2010. The resulting rgeos package (first released in 2010; Bivand and Rundel 2017) brought geometry calculations to R by allowing functions and operators from the GEOS library to manipulate sp objects. Another limitation of sp was its limited support of raster data. The raster-package (first released in 2010; Hijmans 2016b) overcame this by providing a raster class and functions for creating, reading and writing raster data. A key feature of raster is its ability to work with data sets that are too large to fit into the main memory (RAM), thereby overcoming one of R’s major limitations when working on raster data.11 In parallel with or partly even preceding the development of spatial classes and methods came the support for R as an interface to dedicated GIS software. The GRASS package (Bivand 2000) and follow-on packages spgrass6 and rgrass7 (for GRASS GIS 6 and 7, respectively) were prominent examples in this direction (R. Bivand 2016b; R. Bivand 2016a). Other examples of bridges between R and GIS include RSAGA (Brenning and Bangs 2016, first published in 2008), ArcGIS (Brenning 2012, first published in 2008), and RQGIS (Muenchow and Schratz 2017, first published in 2016). Map making was not a focus of R’s early spatial capabilities. But soon sp provided methods for advanced map making using both the base and lattice plotting system. Despite this, a demand for the layered grammar of graphics was growing especially after the release of ggplot2 in 2007. ggmap extended ggplot2’s spatial capabilities (Kahle and Wickham 2013). However, its main purpose was the easy access of several APIs to automatically download map tiles (among others, Google Maps and OpenStreetmap) and subsequent plotting of these as a basemap. Though ggmap facilitated map-making with ggplot2, one main limitation remained. To make spatial data work with the ggplot2 system, one needed to fortify spatial objects. Basically, this means, you need to combine the coordinates and attribute slots of a spatial class object into one data frame. While this works well in the case of points, it duplicates the same information over and over again in the case of polygons, since each coordinate (vertex) of a polygon receives the attribute data of the polygon. This is especially disadvantageous if you need to deal with tens of thousands of polygons. With the introduction of simple features to R this limitation disappears, and it seems likely that this will make ggplot2 the standard tool for the visualization of vector data. This might be different regarding the visualization of raster data. Raster visualization methods received a boost with the release of rasterVis (Lamigueiro 2014) which builds on top of the lattice system. More recently, new packages aim at easing the creation of complex, high-quality maps with minimal code. The tmap package (released in 2014) might serve as an archetype for this kind of development (Tennekes 2017). It facilitates the user-friendly creation of thematic maps with an intuitive command-line interface (see also mapmisc) . tmap is a sophisticated yet user friendly mapping package which works in harmony with the leaflet package (released in 2015) for interactive map making (Cheng, Karambelkar, and Xie 2017). Similarly, the mapview package builds also on top of leaflet (Appelhans et al. 2017) for interactive mapping based on sp or sf objects. mapview allows the access of a wide range of background maps, scale bars and more. However, it is noteworthy that among all the recent developments described above, the support for simple features (sf; Pebesma 2017) has been without doubt the most important evolution in R’s spatial ecosystem. Naturally, this is the reason why we will describe sf in detail in Chapter 2. 1.6 Exercises Think about the terms ‘GIS’, ‘GDS’ and ‘Geocomputation’ described above. Which is your favorite, and why? Provide three reasons for using a scriptable language such as R for geocomputation instead of using an established GIS program such as QGIS. Name two advantages and two disadvantages of using mature packages compared with ‘cutting edge’ packages for spatial data (for example sp vs sf). References "],
["spatial-class.html", "2 Geographic data in R Prerequisites 2.1 Vector data 2.2 Raster data 2.3 Coordinate Reference Systems 2.4 Units 2.5 Exercises", " 2 Geographic data in R Prerequisites This is the first practical chapter of the book, and therefore it comes with some software requirements. We assume that you have installed on your computer a recent version of R and that you are comfortable using it at the command line, e.g., via an integrated development environment (IDE) such as RStudio (recommended). R/RStudio works on all major operating systems. You can install and set up both in a few minutes on most modern computers, as described in section 2.3 and section 2.5 of Gillespie and Lovelace (2016) (other guides are available). If you are not a regular R user, we recommend that you familiarize yourself with the language before proceeding with this chapter. You can do so using resources such as Gillespie and Lovelace (2016), Grolemund and Wickham (2016) as well as online interactive guides such as DataCamp. It is also worth to spend time to establish an efficient programming workflow, for example with the help of an RStudio ‘project’. Subsequently, you can use the RStudio project provided in the root directory of the geocompr GitHub repository. This will make it easier to run this book’s worked examples on your computer. After having successfully installed R, you have to install and load add-on packages to handle spatial data. On Mac and Linux operating systems there are a few additional requirements: see the README of the sf package for instructions. The sf, raster, spData, and spDataLarge packages used in this chapter can be installed and loaded with the following commands: install.packages(&quot;sf&quot;) install.packages(&quot;raster&quot;) install.packages(&quot;spData&quot;) library(sf) library(raster) library(spData) install.packages(&quot;spDataLarge&quot;) library(spDataLarge) This chapter will provide brief explanations of the fundamental geographic data models: vector and raster. We will introduce briefly the theory behind both data models, and then move quickly towards how these are implemented in R. Vector and raster models are vital to geospatial analysis (Longley 2015). The vector data model represents the world using points, lines and polygons. This means, it supports data with discrete, well-defined borders. Generally, vector datasets have a high level of precision (but not necessarily accuracy as we will see in 2.4). On the other hand, the raster data model is good at representing continuous phenomena such as elevation or rainfall with the help of grid cell that break the surface up into a cells of constant size (resolution). Rasters, therefore, aggregate spatially specific features to a given resolution resulting in small features being blurred or lost. Naturally, it depends on your discipline if you more often user raster or vector data: Vector data tends to dominate the social sciences because human settlements and boundaries have discrete borders. By contrast, raster data often dominates the environmental sciences because these often use remotely sensed imagery. However, there is a substantial level of overlap: ecologists and demographers, for example, commonly use both vector and raster data. We, therefore, strongly recommend learning about each data model before proceeding to understand how to manipulate them in subsequent chapters. This book uses sf and raster packages to work with vector data and raster datasets respectively. 2.1 Vector data The geographic vector model is based on points that are located on a Cartesian (or geographic) coordinate system.12 Typically, a point consists of an x and a y value. These two numbers simply represent the distance from the \\(origin\\) along the \\(x\\) (horizontal) and \\(y\\) (vertical) axis in Euclidean space.13 In mathematical notation these points are typically represented as numbers separated by commas and enclosed by a pair of brackets: \\((1, 3)\\) for example, represents a point located one unit to the right and three units above the origin. Instead of creating these points manually, one would commonly read-in data with functions such as read_csv() from the tidyverse or read_sf() from the sf package (see chapter 5). To generate new data (e.g., for testing), one can use the command c() (think of ‘c’ for ‘combine’), as illustrated below:14 p = c(1, 3) Now this can be plotted in Cartesian space, as illustrated in figure 2.1: plot(x = p[1], y = p[2], xlim = c(0, 5), ylim = c(0, 5)) Figure 2.1: Illustration of vector point data in base R. 2.1.1 An introduction to simple features Simple features is an open standard developed and endorsed by the Open Geospatial Consortium (OGC) to represent a wide range of geographical information. It is a hierarchical data model that simplifies geographic data by condensing a complex range of geographic forms into a single geometry class. Only 7 out of 68 possible types of simple feature are currently used in the vast majority of GIS operations (Figure 2.2). The R package sf (Pebesma 2017) fully supports all of these (including plotting methods etc.).15 Figure 2.2: The subset of the Simple Features class hierarchy supported by sf. Figure based on the Open Geospatial Consortium document 06-103r4. sf can represent all common vector geometry types (raster data classes are not supported by sf): points, lines, polygons and their respective ‘multi’ versions (which group together features of the same type into a single feature). sf also supports geometry collections, which can contain multiple geometry types in a single object. Given the breadth of geographic data forms, it may come as a surprise that a class system to support all of them is provided in a single package, which can be installed from CRAN:16 sf incorporates the functionality of the three main packages of the sp paradigm (sp (Pebesma and Bivand 2017) for the class system, rgdal (Bivand, Keitt, and Rowlingson 2017) for reading and writing data, rgeos (Bivand and Rundel 2017) for spatial operations undertaken by GEOS) in a single, cohesive whole. This is well-documented in sf’s vignettes: vignette(&quot;sf1&quot;) # for an introduction to the package vignette(&quot;sf2&quot;) # for reading, writing and converting Simple Features vignette(&quot;sf3&quot;) # for manipulating Simple Features As the first vignette explains, simple feature objects in R are stored in a data frame, with geographic data occupying a special column, a ‘list-column’. This column is usually named ‘geom’ or ‘geometry’. Let us load a ‘real world’ example, here the world dataset, with the help of the spData package: library(spData) spData silently loaded the world dataset (and many other spatial datasets - see the spData website for a full list). This dataset contains spatial and non-spatial information, as shown by the function names(), which reports the column headings in data frames. Please note that the last column contains the geographic information: names(world) #&gt; [1] &quot;iso_a2&quot; &quot;name_long&quot; &quot;continent&quot; &quot;region_un&quot; &quot;subregion&quot; #&gt; [6] &quot;type&quot; &quot;area_km2&quot; &quot;pop&quot; &quot;lifeExp&quot; &quot;gdpPercap&quot; #&gt; [11] &quot;geom&quot; It is the contents of this modest-looking geom column that gives sf objects their spatial powers. This so-called list-column contains all the coordinates. sf’s plot() method uses these coordinates to create a map (Figure 2.3). library(sf) # must be loaded to plot sf objects #&gt; Linking to GEOS 3.5.0, GDAL 2.1.0, proj.4 4.8.0 plot(world) #&gt; Warning: plotting the first 9 out of 10 attributes; use max.plot = 10 to #&gt; plot all Figure 2.3: A spatial plot of the world using the sf package, with a facet for each attribute. Note that instead of creating a single map, as most GIS programs would, the plot() command has created multiple maps, one for each variable in the world datasets. This behavior can be useful for exploring the spatial distribution of different variables and is discussed further in 2.1.3 below. Being able to treat spatial objects as regular data frames with spatial powers has many advantages, especially if you are already used to working with data frames. The commonly used summary() function, for example, provides a useful overview of the variables within the world object. summary(world[&quot;lifeExp&quot;]) #&gt; lifeExp geom #&gt; Min. :48.9 MULTIPOLYGON :177 #&gt; 1st Qu.:64.3 epsg:4326 : 0 #&gt; Median :72.8 +proj=long...: 0 #&gt; Mean :70.6 #&gt; 3rd Qu.:77.1 #&gt; Max. :83.6 #&gt; NA&#39;s :9 Although we have only selected one variable for the summary command, it also outputs an report on the geometry (we explore such ‘attribute operations’ in more depth in Chapter 3). This is due to the sticky behavior of the geometry columns of sf objects (see Chapter 3). Hence, the result provides a quick summary of both the non-spatial and spatial data contained in world: the average life expectancy is 73 years (ranging from less than 50 to more than 80 years) across all countries which are represented in the form of MULTIPOLYGONs. MULTIPOLYGONs allow more than one polygon per row (here: country). This representation is necessary for countries with many islands such as Indonesia and Greece. It is worth taking a deeper look at the basic behavior and contents of this simple feature object, which can usefully be thought of as a ’Spatial dataFrame). sf objects are easy to subset. The code below shows its first two rows and three columns. The output shows two major differences compared with a regular data.frame: the inclusion of additional geographic data (geometry type, dimension, bbox and CRS information - epsg (SRID), proj4string), and the presence of final geometry column: world[1:2, 1:3] #&gt; Simple feature collection with 2 features and 3 fields #&gt; geometry type: MULTIPOLYGON #&gt; dimension: XY #&gt; bbox: xmin: 11.6401 ymin: -17.93064 xmax: 75.15803 ymax: 38.48628 #&gt; epsg (SRID): 4326 #&gt; proj4string: +proj=longlat +datum=WGS84 +no_defs #&gt; iso_a2 name_long continent geom #&gt; 1 AF Afghanistan Asia MULTIPOLYGON(((61.210817091... #&gt; 2 AO Angola Africa MULTIPOLYGON(((16.326528354... All this may seem rather complex, especially for a class system that is supposed to be simple. However, there are good reasons for organizing things this way and using sf. 2.1.2 Why Simple Features? There are many advantages of sf over sp, including: Faster reading and writing of data (more than 10 times faster in some cases) Better plotting performance sf objects can be treated as data frames in most operations sf functions can be combined using %&gt;% operator and works well with the tidyverse collection of R packages sf function names are relatively consistent and intuitive (all begin with st_) compared with the function names and syntax of the sp, rgdal and rgeos packages that it supersedes. A broader advantage is that simple features are so well-supported by other software products, not least PostGIS, which has heavily influenced the design of sf. A disadvantage you should be aware of, however, is that sf is not feature complete and that it continues to evolve. The transition from sp to sf will likely take many years, and many spatial packages may never switch. Even if you discover spatial data with R through the sf package, it is still worth at least being aware of sp classes, even if you rarely use them for everyday geospatial tasks. Fortunately it is easy to translate between sp and sf using the as() function: library(sp) world_sp = as(object = world, Class = &quot;Spatial&quot;) Bivand, Pebesma, and Gómez-Rubio (2013) provides an excellent introduction to sp. 2.1.3 Basic map making You can quickly create basic maps in sf with the base plot() function. By default, sf creates a multi-panel plot (like sp’s spplot()), one sub-plot for each variable (see left-hand image in Figure 2.4). plot(world[3:4]) plot(world[&quot;pop&quot;]) Figure 2.4: Plotting with sf, with multiple variables (left) and a single variable (right). As with sp, you can add further layers to your maps using the add = TRUE-argument of the plot() function .17 To illustrate this, and prepare for content covered in chapters 3 and 4 on attribute and spatial data operations, we will subset and combine countries in the world object, which creates a single object representing Asia: asia = world[world$continent == &quot;Asia&quot;, ] asia = st_union(asia) We can now plot the Asian continent over a map of the world. Note, however, that this only works if the initial plot has only one layer: plot(world[&quot;pop&quot;]) plot(asia, add = TRUE, col = &quot;red&quot;) This can be very useful for quickly checking the geographic correspondence between two or more layers: the plot() function is fast to execute and requires few lines of code, but does not create interactive maps with a wide range of options. For more advanced map making we recommend using a dedicated visualization package such as tmap, ggplot2, mapview, or leaflet. 2.1.3.1 Further work sf simplifies spatial data objects compared with sp and provides a near-direct interface to GDAL and GEOS C++ functions. In theory this should make sf faster than sp/rgdal/rgeos, something that is tested in Chapter 5 for data I/O. This section introduces sf classes in preparation for subsequent chapters which deal with vector data (in particular Chapter 4). As a final exercise, we will see one way of how to do a spatial overlay in sf. First, we convert the countries of the world into centroids, and then subset those in Asia. Finally, the summary-command tells us how many centroids (countries) are part of Asia (43) and how many are not (134). world_centroids = st_centroid(world) #&gt; Warning in st_centroid.sfc(st_geometry(x)): st_centroid does not give #&gt; correct centroids for longitude/latitude data sel_asia = st_intersects(world_centroids, asia, sparse = FALSE) #&gt; although coordinates are longitude/latitude, it is assumed that they are planar summary(sel_asia) #&gt; V1 #&gt; Mode :logical #&gt; FALSE:134 #&gt; TRUE :43 Note: st_intersects() uses GEOS in the background for the spatial overlay operation (see also Chapter 4). Since sf’s plot() function builds on base plotting methods, you may also use its many optional arguments (see ?plot and ?par). This provides powerful but not necessarily intuitive functionality. For instance, in order to make the diameter of a circle proportional to a country’s population, we provide the cex argument with the result of a calculation (see Figure 2.5, and the code below). plot(world[&quot;continent&quot;]) plot(world_centroids, add = TRUE, cex = world$pop / 1e8, lwd = 3) Figure 2.5: Centroids representing country population, diameter being proportional to population. 2.1.4 Simple feature classes To understand new data formats in depth, it often helps to build them from the ground up. This section walks you through vector spatial classes step-by-step, from the elementary simple feature geometry to simple feature objects of class sf representing complex spatial data. Before describing each geometry type that the sf package supports, it is worth taking a step back to understand the building blocks of sf objects. As stated in section 2.1.1, simple features are simply data frames with at least one special column that makes it spatial. These spatial columns are often called geom or geometry and can be like non-spatial columns: world$geom refers to the spatial element of the world object described above. These geometry columns are ‘list columns’ of class sfc: they are simple feature collections. In turn, sfc objects are composed of one or more objects of class sfg: simple feature geometries. To understand how the spatial components of simple features work, it is vital to understand simple feature geometries. For this reason we cover each currently supported sfg type in the next subsections before moving on to describe how these can be combined to form sfc and eventually full sf objects. 2.1.4.1 Simple feature geometry types Geometries are the basic building blocks of simple features. Simple features in R can take on one of the 17 geometry types supported by the sf package. In this chapter we will focus on the seven most commonly used types: POINT, LINESTRING, POLYGON, MULTIPOINT, MULTILINESTRING, MULTIPOLYGON and GEOMETRYCOLLECTION. Find the whole list of possible feature types in the PostGIS manual. Generally, well-known binary (WKB) or well-known text (WKT) are the standard encoding for simple feature geometries. WKB representations are usually hexadecimal strings easily readable for computers. This is why, GIS and spatial databases use WKB to transfer and store geometry objects. WKT, on the other hand, is a human-readable text markup description of simple features. Both formats are exchangeable, and if we present one, we will naturally choose the WKT representation. The basis for each geometry type is the point. A point is simply a coordinate in 2D, 3D or 4D space (see vignette(&quot;sf1&quot;) for more information) such as: POINT (5 2) A linestring is a sequence of points with a straight line connecting the points, for example: LINESTRING (1 5, 4 4, 4 1, 2 2, 3 2) A polygon is a sequence of points that form a closed, non-intersecting ring. Closed means that the first and the last point of a polygon have the same coordinates. By definition, a polygon has one exterior boundary (outer ring) and can have zero or more interior boundaries (inner rings), also known as holes. Polygon without a hole - POLYGON ((1 5, 2 2, 4 1, 4 4, 1 5)) Polygon with one hole - POLYGON ((1 5, 4 4, 4 1, 2 2, 1 5), (2 4, 3 4, 3 3, 2 3, 2 4)) So far, our geometry types have just included one feature. To represent multiple features in one object, we can use the “multi”-version of each geometry type: Multipoint - MULTIPOINT (5 2, 1 3, 3 4, 3 2) Multistring - MULTILINESTRING ((1 5, 4 4, 4 1, 2 2, 3 2), (1 2, 2 4)) Multipolygon - MULTIPOLYGON ((1 5, 4 4, 4 1, 2 2, 1 5), (0 2, 1 2, 1 3, 0 3, 0 2)) Finally, a geometry collection might contain any combination of geometry types: Geometry collection - GEOMETRYCOLLECTION (MULTIPOINT (5 2, 1 3, 3 4, 3 2), LINESTRING (1 5, 4 4, 4 1, 2 2, 3 2))) 2.1.4.2 Simple feature geometry (sfg) objects In R, the sfg class represents the different simple feature geometry types: (multi-)point, (multi-)linestring, (multi-)polygon or geometry collection. Usually you are spared the tedious task of creating geometries on your own since you can simply import an already existing spatial file. However, there are a set of function to create simple feature geometry objects (sfg) from scratch if needed. The names of these functions are simple and consistent, as they all start with the st_ prefix and end with the name of the geometry type in lowercase letters: A point - st_point() A linestring - st_linestring() A polygon - st_polygon() A multipoint - st_multipoint() A multilinestring - st_multilinestring() A multipolygon - st_multipolygon() A geometry collection - st_geometrycollection() In R, you create sfg objects with the help of three native data types: A numeric vector - a single point A matrix - a set of points, where each row contains a point - a multipoint or linestring A list - any other set, e.g. a multilinestring or geometry collection To create point objects, we use the st_point() function in conjunction with a numeric vector: # note that we use a numeric vector for points st_point(c(5, 2)) # XY point #&gt; POINT(5 2) st_point(c(5, 2, 3)) # XYZ point #&gt; POINTZ(5 2 3) st_point(c(5, 2, 1), dim = &quot;XYM&quot;) # XYM point #&gt; POINTM(5 2 1) st_point(c(5, 2, 3, 1)) # XYZM point #&gt; POINTZM(5 2 3 1) XY, XYZ and XYZM types of points are automatically created based on the length of a numeric vector. Only the XYM type needs to be specified using a dim argument. By contrast, use matrices in the case of multipoint (st_multipoint()) and linestring (st_linestring()) objects: # the rbind function simplifies the creation of matrices ## MULTIPOINT multipoint_matrix = rbind(c(5, 2), c(1, 3), c(3, 4), c(3, 2)) st_multipoint(multipoint_matrix) #&gt; MULTIPOINT(5 2, 1 3, 3 4, 3 2) ## LINESTRING linestring_matrix = rbind(c(1, 5), c(4, 4), c(4, 1), c(2, 2), c(3, 2)) st_linestring(linestring_matrix) #&gt; LINESTRING(1 5, 4 4, 4 1, 2 2, 3 2) Finally, use lists for the creation of multilinestrings, (multi-)polygons and geometry collections: ## POLYGON polygon_list = list(rbind(c(1, 5), c(2, 2), c(4, 1), c(4, 4), c(1, 5))) st_polygon(polygon_list) #&gt; POLYGON((1 5, 2 2, 4 1, 4 4, 1 5)) ## POLYGON with a hole polygon_border = rbind(c(1, 5), c(2, 2), c(4, 1), c(4, 4), c(1, 5)) polygon_hole = rbind(c(2, 4), c(3, 4), c(3, 3), c(2, 3), c(2, 4)) polygon_with_hole_list = list(polygon_border, polygon_hole) st_polygon(polygon_with_hole_list) #&gt; POLYGON((1 5, 2 2, 4 1, 4 4, 1 5), (2 4, 3 4, 3 3, 2 3, 2 4)) ## MULTILINESTRING multilinestring_list = list(rbind(c(1, 5), c(4, 4), c(4, 1), c(2, 2), c(3, 2)), rbind(c(1, 2), c(2, 4))) st_multilinestring((multilinestring_list)) #&gt; MULTILINESTRING((1 5, 4 4, 4 1, 2 2, 3 2), (1 2, 2 4)) ## MULTIPOLYGON multipolygon_list = list(list(rbind(c(1, 5), c(2, 2), c(4, 1), c(4, 4), c(1, 5))), list(rbind(c(0, 2), c(1, 2), c(1, 3), c(0, 3), c(0, 2)))) st_multipolygon(multipolygon_list) #&gt; MULTIPOLYGON(((1 5, 2 2, 4 1, 4 4, 1 5)), ((0 2, 1 2, 1 3, 0 3, 0 2))) ## GEMETRYCOLLECTION gemetrycollection_list = list(st_multipoint(multipoint_matrix), st_linestring(linestring_matrix)) st_geometrycollection(gemetrycollection_list) #&gt; GEOMETRYCOLLECTION(MULTIPOINT(5 2, 1 3, 3 4, 3 2), LINESTRING(1 5, 4 4, 4 1, 2 2, 3 2)) 2.1.4.3 Simple feature collections One sfg object contains only a single simple feature geometry. A simple feature collection (sfc) is a list of sfg objects and can additionally contain information about the coordinate reference system in use. For instance, to combine two simple features into one object with two features, we can use the st_sfc() function. This is important since this collection represents the geometry column in sf data frames: # sfc POINT point1 = st_point(c(5, 2)) point2 = st_point(c(1, 3)) st_sfc(point1, point2) #&gt; Geometry set for 2 features #&gt; geometry type: POINT #&gt; dimension: XY #&gt; bbox: xmin: 1 ymin: 2 xmax: 5 ymax: 3 #&gt; epsg (SRID): NA #&gt; proj4string: NA #&gt; POINT(5 2) #&gt; POINT(1 3) In most cases, an sfc object contains objects of the same geometry type. Therefore, when we convert sfg objects of type polygon into a simple feature collection, we would also end up with an sfc object of type polygon. Equally, a collection of multilinestrings would result in an sfc object of type multilinestring: # sfc POLYGON polygon_list1 = list(rbind(c(1, 5), c(2, 2), c(4, 1), c(4, 4), c(1, 5))) polygon1 = st_polygon(polygon_list) polygon_list2 = list(rbind(c(0, 2), c(1, 2), c(1, 3), c(0, 3), c(0, 2))) polygon2 = st_polygon(polygon_list2) st_sfc(polygon1, polygon2) #&gt; Geometry set for 2 features #&gt; geometry type: POLYGON #&gt; dimension: XY #&gt; bbox: xmin: 0 ymin: 1 xmax: 4 ymax: 5 #&gt; epsg (SRID): NA #&gt; proj4string: NA #&gt; POLYGON((1 5, 2 2, 4 1, 4 4, 1 5)) #&gt; POLYGON((0 2, 1 2, 1 3, 0 3, 0 2)) # sfc MULTILINESTRING multilinestring_list1 = list(rbind(c(1, 5), c(4, 4), c(4, 1), c(2, 2), c(3, 2)), rbind(c(1, 2), c(2, 4))) multilinestring1 = st_multilinestring((multilinestring_list1)) multilinestring_list2 = list(rbind(c(2, 9), c(7, 9), c(5, 6), c(4, 7), c(2, 7)), rbind(c(1, 7), c(3, 8))) multilinestring2 = st_multilinestring((multilinestring_list2)) st_sfc(multilinestring1, multilinestring2) #&gt; Geometry set for 2 features #&gt; geometry type: MULTILINESTRING #&gt; dimension: XY #&gt; bbox: xmin: 1 ymin: 1 xmax: 7 ymax: 9 #&gt; epsg (SRID): NA #&gt; proj4string: NA #&gt; MULTILINESTRING((1 5, 4 4, 4 1, 2 2, 3 2), (1 2... #&gt; MULTILINESTRING((2 9, 7 9, 5 6, 4 7, 2 7), (1 7... It is also possible to create an sfc object from sfg objects with different geometry types: # sfc GEOMETRY st_sfc(point1, multilinestring1) #&gt; Geometry set for 2 features #&gt; geometry type: GEOMETRY #&gt; dimension: XY #&gt; bbox: xmin: 1 ymin: 1 xmax: 5 ymax: 5 #&gt; epsg (SRID): NA #&gt; proj4string: NA #&gt; POINT(5 2) #&gt; MULTILINESTRING((1 5, 4 4, 4 1, 2 2, 3 2), (1 2... As mentioned before, sfc objects can additionally store information on the coordinate reference systems (CRS). To specify a certain CRS, we can use the epsg (SRID) or proj4string attributes of an sfc object. The default value of epsg (SRID) and proj4string is NA (Not Available): st_sfc(point1, point2) #&gt; Geometry set for 2 features #&gt; geometry type: POINT #&gt; dimension: XY #&gt; bbox: xmin: 1 ymin: 2 xmax: 5 ymax: 3 #&gt; epsg (SRID): NA #&gt; proj4string: NA #&gt; POINT(5 2) #&gt; POINT(1 3) Of course, all geometries in an sfc object must have the same CRS. We can add coordinate reference system as a crs argument of st_sfc(). This argument accepts either an integer with the epsg code (e.g., 4326) or a proj4string character string (e.g., &quot;+proj=longlat +datum=WGS84 +no_defs&quot;): # EPSG definition st_sfc(point1, point2, crs = 4326) #&gt; Geometry set for 2 features #&gt; geometry type: POINT #&gt; dimension: XY #&gt; bbox: xmin: 1 ymin: 2 xmax: 5 ymax: 3 #&gt; epsg (SRID): 4326 #&gt; proj4string: +proj=longlat +datum=WGS84 +no_defs #&gt; POINT(5 2) #&gt; POINT(1 3) # PROJ4STRING definition st_sfc(point1, point2, crs = &quot;+proj=longlat +datum=WGS84 +no_defs&quot;) #&gt; Geometry set for 2 features #&gt; geometry type: POINT #&gt; dimension: XY #&gt; bbox: xmin: 1 ymin: 2 xmax: 5 ymax: 3 #&gt; epsg (SRID): 4326 #&gt; proj4string: +proj=longlat +datum=WGS84 +no_defs #&gt; POINT(5 2) #&gt; POINT(1 3) Both of these approaches have advantages and disadvantages. An epsg code is usually shorter, and therefore easier to remember. The code also refers to only one, well-defined coordinate reference system. On the other hand, a proj4string definition allows you more flexibility when it comes to specifying different parameters such as the projection type, the datum and the ellipsoid. This way you can specify many different projections, and modify existing ones. This makes the proj4string approach also more complicated.18. epsg always points to exactly one particular CRS. Correspondingly, there is also only one possible proj4string for a specific epsg-code. For example, we can set the UTM Zone 11N projection with epsg code 2955: st_sfc(point1, point2, crs = 2955) #&gt; Geometry set for 2 features #&gt; geometry type: POINT #&gt; dimension: XY #&gt; bbox: xmin: 1 ymin: 2 xmax: 5 ymax: 3 #&gt; epsg (SRID): 2955 #&gt; proj4string: +proj=utm +zone=11 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs #&gt; POINT(5 2) #&gt; POINT(1 3) As you can see above, the proj4string definition was automatically added. Now we can try to set the CRS using proj4string: st_sfc(point1, point2, crs = &quot;+proj=utm +zone=11 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs&quot;) #&gt; Geometry set for 2 features #&gt; geometry type: POINT #&gt; dimension: XY #&gt; bbox: xmin: 1 ymin: 2 xmax: 5 ymax: 3 #&gt; epsg (SRID): NA #&gt; proj4string: +proj=utm +zone=11 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs #&gt; POINT(5 2) #&gt; POINT(1 3) However, the epsg string of our result remained empty. This is because there is no general method to convert from proj4string to epsg. 2.1.4.4 Simple feature objects So far, we have only dealt with the pure geometries. Most of the time, however, these geometries come with a set of attributes describing them. These attributes could represent the name of the geometry, measured values, groups to which the geometry belongs, and many more. For example, we measured a temperature of 25°C on Trafalgar Square in London on June 21th 2017. Hence, we have a specific point in space (the coordinates), the name of the location (Trafalgar Square), a temperature value, the date of the measurement. Other attributes might include a urbanity category (city or village), or a remark if the measurement was made using an automatic station. The simple feature class, sf, is a combination of an attribute table (data.frame) and a simple feature geometry collection (sfc). Simple features are created using the st_sf() function: # sfg objects london_point = st_point(c(0.1, 51.5)) ruan_point = st_point(c(-9, 53)) # sfc object our_geometry = st_sfc(london_point, ruan_point, crs = 4326) # data.frame object our_attributes = data.frame(name = c(&quot;London&quot;, &quot;Ruan&quot;), temperature = c(25, 13), date = c(as.Date(&quot;2017-06-21&quot;), as.Date(&quot;2017-06-22&quot;)), category = c(&quot;city&quot;, &quot;village&quot;), automatic = c(FALSE, TRUE)) # sf object sf_points = st_sf(our_attributes, geometry = our_geometry) The above example illustrates the components of sf objects. Firstly, coordinates define the geometry of the simple feature geometry (sfg). Secondly, we can combine the geometries in a simple feature collection (sfc) which also stores the CRS. Subsequently, we store the attribute information on the geometries in a data.frame. Finally, the st_sf() function combines the attribute table and the sfc object in an sf object. sf_points #&gt; Simple feature collection with 2 features and 5 fields #&gt; geometry type: POINT #&gt; dimension: XY #&gt; bbox: xmin: -9 ymin: 51.5 xmax: 0.1 ymax: 53 #&gt; epsg (SRID): 4326 #&gt; proj4string: +proj=longlat +datum=WGS84 +no_defs #&gt; name temperature date category automatic geometry #&gt; 1 London 25 2017-06-21 city FALSE POINT(0.1 51.5) #&gt; 2 Ruan 13 2017-06-22 village TRUE POINT(-9 53) class(sf_points) #&gt; [1] &quot;sf&quot; &quot;data.frame&quot; The result shows that sf objects actually have two classes, sf and data.frame. Simple features are simply data frames (square tables), but with spatial attributes (usually stored in a special geom list-column in the data frame). This duality is central to the concept of simple features: most of the time a sf can be treated as and behaves like a data.frame. Simple features are, in essence, data frames with a spatial extension. 2.2 Raster data Figure 2.6: Raster data: A - a grid representation; B - numbers of the cells; C - values of the cells; D - a final raster map The geographic raster data model consists of a raster header and a matrix (with rows and columns) representing equally spaced cells (often also called pixels; Figure 2.6:A). The raster header defines the coordinate reference system, the extent and the origin. The origin (or starting point) is frequently the coordinate of the lower-left corner of the matrix (the raster package, however, uses the upper left corner, by default (Figure 2.6:B)). The header defines the extent via the number of columns, the number of rows and the cell size resolution. Hence, starting from the origin, we can easily access and modify each single cell by either using the ID of a cell (Figure 2.6:B) or by explicitly specifying the rows and columns. This matrix representation avoids storing explicitly the coordinates for the four corner points (in fact it only stores one coordinate, namely the origin) of each cell corner as would be the case for rectangular vector polygons. This and matrix algebra makes raster processing much more efficient and faster than vector data processing. However, in contrast to vector data, a raster cell can only hold a single value. The value might be numeric or categorical (Figure 2.6:C). You can also specify a no-data value in the header of a raster, frequently -9999 (in R we often use NA). Raster maps usually represent continuous phenomena such as elevation, temperature, population density or spectral data (Figure 2.7). Of course, we can represent discrete features such as soil or landcover classes also with the help of a raster data model (Figure 2.7). Consequently, the discrete borders of these features become blurred, and depending on the spatial task a vector representation might be more suitable. Figure 2.7: Examples of continuous (left) and categorical (right) raster 2.2.1 An introduction to raster The raster package supports raster objects in R. It provides an extensive set of functions to create, read, export, manipulate and process raster datasets. Aside from general raster data manipulation, raster provides many low level functions that can form the basis to develop more advanced raster functionality. raster also lets you work on large raster datasets that are too large to fit into the main memory . In this case, raster provides the possibility to divide the raster into smaller chunks (rows or blocks), and processes these iteratively instead of loading the whole raster file into RAM (for more information, please refer to `vignette(“functions”, package = “raster”). For the illustration of the raster concepts, we will use datasets from the spDataLarge package. It consists of a few raster and one vector datasets representing an area of Zion National Park. For example, srtm.tif is a digital elevation model of this area (for more details - see its documentation ?srtm) Firstly, we would create a new RasterLayer object new_raster: library(spDataLarge) library(raster) raster_filepath = system.file(&quot;raster/srtm.tif&quot;, package = &quot;spDataLarge&quot;) new_raster = raster(raster_filepath) If you just type the name of the raster in the console, this will print out the raster header (extent, dimensions, resolution, CRS) and some additional information (class, data source name, summary of the raster values): new_raster #&gt; class : RasterLayer #&gt; dimensions : 463, 459, 212517 (nrow, ncol, ncell) #&gt; resolution : 73.7, 92.5 (x, y) #&gt; extent : 301929, 335757, 4111262, 4154089 (xmin, xmax, ymin, ymax) #&gt; coord. ref. : +proj=utm +zone=12 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs #&gt; data source : /home/travis/R/Library/spDataLarge/raster/srtm.tif #&gt; names : srtm #&gt; values : 1050, 2895 (min, max) To access individual header information, you can use following commands: # dimensions (number of rows, number of columns, number of cells) dim(new_raster) #&gt; [1] 463 459 1 # spatial resolution res(new_raster) #&gt; [1] 73.7 92.5 # spatial extent extent(new_raster) #&gt; class : Extent #&gt; xmin : 301929 #&gt; xmax : 335757 #&gt; ymin : 4111262 #&gt; ymax : 4154089 # coordinate reference system crs(new_raster) #&gt; CRS arguments: #&gt; +proj=utm +zone=12 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m #&gt; +no_defs Note that in contrast to the sf package, raster only accepts the proj4string representation of the coordinate reference system. You can also summarize and plot raster cell values in a non-spatial fashion using base R functions such as summary() and hist(). # numerical summary of the data summary(new_raster) #&gt; Warning in .local(object, ...): summary is an estimate based on a sample of 1e+05 cells (47.06% of all cells) #&gt; srtm #&gt; Min. 1050 #&gt; 1st Qu. 1544 #&gt; Median 1840 #&gt; 3rd Qu. 2121 #&gt; Max. 2895 #&gt; NA&#39;s 0 # histogram of the values hist(new_raster) #&gt; Warning in .hist1(x, maxpixels = maxpixels, main = main, plot = plot, ...): #&gt; 47% of the raster cells were used. 100000 values used. getValues() extracts the values of a raster as a numerical vector. To only select specific rows, use the row parameter. new_raster_values = getValues(new_raster) head(new_raster_values) #&gt; [1] 1743 1739 1730 1721 1715 1709 The new vector, new_raster_values, can serve as input for subsequent statistical operations. Sometimes it is important to know if all values of a raster are currently in memory or on disk. Find out with the inMemory() function: inMemory(new_raster) #&gt; [1] FALSE help(package = &quot;raster&quot;, topic = &quot;raster-package&quot;) returns a full list of all available raster functions. 2.2.2 Basic map making Similar to the sf package, raster also provides plot() methods for its own classes. plot(new_raster) Moreover, it is possible to plot raster together with vector data. For this purpose, we need to read a vector dataset: vector_filepath = system.file(&quot;vector/zion.gpkg&quot;, package=&quot;spDataLarge&quot;) new_vector = st_read(vector_filepath) Our new object, new_vector, is a polygon representing the borders of Zion National Park (?zion). We could impose these borders on the elevation map again using the plot() function, this time with the add argument set to TRUE: plot(new_raster) plot(new_vector, add = TRUE) There are several different approaches to plot raster data in R. The rasterVis package provides a set of methods for visualizing univariate and multivariate (such as spatiotemporal) rasters. Moreover, packages such as tmap, mapview and leaflet facilitate presentation of both, raster and vector, objects. 2.2.3 Raster classes The RasterLayer class represents the simplest form of a raster object, and consists of only one layer. To create an object of class RasterLayer, we can use the raster() function. This function behavior changes based on a given arguments. For example, a new RasterLayer object could be created from a file, when a path to a raster file is provided: raster_filepath = system.file(&quot;raster/srtm.tif&quot;, package = &quot;spDataLarge&quot;) new_raster = raster(raster_filepath) Without any arguments, the raster() function would create an empty RasterLayer: new_raster2 = raster() new_raster2 #&gt; class : RasterLayer #&gt; dimensions : 180, 360, 64800 (nrow, ncol, ncell) #&gt; resolution : 1, 1 (x, y) #&gt; extent : -180, 180, -90, 90 (xmin, xmax, ymin, ymax) #&gt; coord. ref. : +proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0 An existing raster could be used a as a template for a new object when a main argument x is of the Raster* class (note that new_raster3 do not keep the values of new_raster): new_raster3 = raster(new_raster) new_raster3 #&gt; class : RasterLayer #&gt; dimensions : 463, 459, 212517 (nrow, ncol, ncell) #&gt; resolution : 73.7, 92.5 (x, y) #&gt; extent : 301929, 335757, 4111262, 4154089 (xmin, xmax, ymin, ymax) #&gt; coord. ref. : +proj=utm +zone=12 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs Creation of the RasterLayer object is also possible with parameters given by the user. In this kind of situations, a number of columns and rows and extent needs to be specified: # creation of the RasterLayer object with a given number of columns and rows, and extent new_raster4 = raster(ncol = 101, nrow = 77, xmn = 0, xmx = 101, ymn = 0, ymx = 77) new_raster4 #&gt; class : RasterLayer #&gt; dimensions : 77, 101, 7777 (nrow, ncol, ncell) #&gt; resolution : 1, 1 (x, y) #&gt; extent : 0, 101, 0, 77 (xmin, xmax, ymin, ymax) #&gt; coord. ref. : +proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0 Finally, this function could create RasterLayer based on many types of objects, such as a matrix, Extent or Spatial* (from sp) object. For more information take a look at the help file - ?raster. There are several ways to add new values to the Raster* objects. Values for the whole object could be add with setValues(): # adding random values to the raster object new_random_values = sample(seq_len(ncell(new_raster4))) setValues(new_raster4, new_random_values) #&gt; class : RasterLayer #&gt; dimensions : 77, 101, 7777 (nrow, ncol, ncell) #&gt; resolution : 1, 1 (x, y) #&gt; extent : 0, 101, 0, 77 (xmin, xmax, ymin, ymax) #&gt; coord. ref. : +proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0 #&gt; data source : in memory #&gt; names : layer #&gt; values : 1, 7777 (min, max) It is also possible to replace cell values by specifying cell numbers, or row and column numbers: # change the value of 15th cell to 826 new_raster4[15] = 826 # change the value of the cell in the second row and forth column to 826 new_raster4[2, 4] = 826 Aside from the RasterLayer, there are two additional classes: RasterBrick and RasterStack. Both can handle multiple layers, but differ regarding the number of supported file formats, type of internal representation and processing speed. A RasterBrick consists of multiple layers, which typically correspond to a multispectral satellite file. The brick() function creates a RasterBrick object. Usually, you provide it with a filename to a multilayer raster file but might also use another raster object and other spatial objects (see its help page for all supported formats). multilayer_raster_filepath = system.file(&quot;raster/landsat.tif&quot;, package=&quot;spDataLarge&quot;) r_brick = brick(multilayer_raster_filepath) r_brick #&gt; class : RasterBrick #&gt; dimensions : 1428, 1128, 1610784, 4 (nrow, ncol, ncell, nlayers) #&gt; resolution : 30, 30 (x, y) #&gt; extent : 301905, 335745, 4111245, 4154085 (xmin, xmax, ymin, ymax) #&gt; coord. ref. : +proj=utm +zone=12 +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0 #&gt; data source : /home/travis/R/Library/spDataLarge/raster/landsat.tif #&gt; names : landsat.1, landsat.2, landsat.3, landsat.4 #&gt; min values : 7550, 6404, 5678, 5252 #&gt; max values : 19071, 22051, 25780, 31961 The nlayers function retrieves the number of layers stored in a Raster* object: nlayers(r_brick) #&gt; [1] 4 A RasterStack is similar to a RasterBrick in the sense that it consists also of multiple layers. More specifically, a RasterStack is a list of RasterLayer objects with the same extent and resolution. Hence, one way to create it is with the help of spatial objects already existing in R’s global environment. And again, one can simply specify a path to a file stored on disk. The possibility to create a RasterStack from a file stored on disk and an object residing in R’s global environment is one of the main differences compared to a RasterBrick. raster_on_disk = raster(r_brick, layer = 1) raster_in_memory = raster(xmn = 301905, xmx = 335745, ymn = 4111245, ymx = 4154085, res = 30) values(raster_in_memory) = sample(1:ncell(raster_in_memory)) crs(raster_in_memory) = crs(raster_on_disk) r_stack &lt;- stack(raster_in_memory, raster_on_disk) r_stack #&gt; class : RasterStack #&gt; dimensions : 1428, 1128, 1610784, 2 (nrow, ncol, ncell, nlayers) #&gt; resolution : 30, 30 (x, y) #&gt; extent : 301905, 335745, 4111245, 4154085 (xmin, xmax, ymin, ymax) #&gt; coord. ref. : +proj=utm +zone=12 +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0 #&gt; names : layer, landsat.1 #&gt; min values : 1, 7550 #&gt; max values : 1610784, 19071 Another difference is that the processing time for RasterBrick objects should be usually shorter than for RasterStack objects. Note that operations on RasterBrick and RasterStack objects will typically return a RasterBrick. 2.3 Coordinate Reference Systems Despite the differences between vector and raster spatial data types, they are united by shared concepts intrinsic to spatial data. Perhaps the most important of these is the Coordinate Reference System (CRS), which defines how the spatial elements of the data relate to the surface of the Earth (or other body). In sf the CRS of an object can be retrieved and set using st_crs() and st_set_crs() respectively: old_crs = st_crs(new_vector) # get CRS old_crs # print CRS #&gt; $epsg #&gt; [1] NA #&gt; #&gt; $proj4string #&gt; [1] &quot;+proj=utm +zone=12 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs&quot; #&gt; #&gt; attr(,&quot;class&quot;) #&gt; [1] &quot;crs&quot; new_vector = st_set_crs(new_vector, 4326) # set CRS #&gt; Warning: st_crs&lt;- : replacing crs does not reproject data; use st_transform #&gt; for that Figure 2.8: Examples of projected (left) and geographic (right) coordinate systems for a vector data type Note the warning emitted after the CRS for sf_points was set to 27700. This is a good thing: we have imposed a spatial reference onto data without knowing what that means. To discover what the ‘magic number’ 27700 means, we can retrieve the CRS again: st_crs(new_vector) #&gt; $epsg #&gt; [1] 4326 #&gt; #&gt; $proj4string #&gt; [1] &quot;+proj=longlat +datum=WGS84 +no_defs&quot; #&gt; #&gt; attr(,&quot;class&quot;) #&gt; [1] &quot;crs&quot; rasters: transformation means change of the coordinates of (special case of resampling) Figure 2.9: Examples of projected (left) and geographic (right) coordinate systems for a raster data type 2.4 Units The final thing to say about sf objects in this chapter is that they have units. This is advantageous because it prevents confusion caused by the fact that different CRSs use different units (most use meters, some use feet). Furthermore, it also provides information on dimensionality, as illustrated by calculating the area of Nigeria: nigeria = world[world$name_long == &quot;Nigeria&quot;, ] st_area(nigeria) #&gt; 9.05e+11 m^2 The result, as expected, is in units of square meters (m2), representing two dimensional space, and that Nigeria is a large country! To translate the huge number into a more digestible size, it is tempting to divide the results by a million (the number of square meters in a square kilometer): st_area(nigeria) / 1e6 #&gt; 905072 m^2 However, the result is incorrectly given again as square meters. The solution is to set the correct units with the units package: units::set_units(st_area(nigeria), km^2) #&gt; 905072 km^2 2.5 Exercises What does the summary of the geometry column tell us about the world dataset, in terms of: The geometry type? How many countries there are? The coordinate reference system (CRS)? Using sf’s plot() command, create a map of Nigeria in context, building on the code that creates and plots Asia above (see Figure ?? for an example of what this could look like). Hint: this used the lwd, main and col arguments of plot(). Bonus: make the country boundaries a dotted grey line. Hint: border is an additional argument of plot() for sf objects. Exercise 3 What does the lwd argument do in the plot() code that generates Figure 2.5. Perform the same operations and map making for another continent of your choice. Bonus: Download some global geographic data and add attribute variables assigning them to the continents of the world. References "],
["attr.html", "3 Attribute data operations Prerequisites 3.1 Introduction 3.2 Attribute subsetting 3.3 Attribute data aggregation 3.4 Attribute data joining 3.5 Attribute data creation 3.6 Removing spatial information 3.7 Exercises", " 3 Attribute data operations Prerequisites This chapter requires the packages tidyverse and sf: library(sf) library(tidyverse) We will also make use of the world and worldbank_df data sets. Note that loading the spData package automatically attaches these data sets to your global environment: library(spData) 3.1 Introduction Attribute data is non-spatial information associated with geographic (geometry) data. A bus station, for example, could be represented by a field containing its name (attribute data), associated with its latitude and longitude position (geometry data). Simple features, described in the previous chapter, store attribute data in a data frame, with each column corresponding to a variable (such as ‘name’) and each row to one observation (such as an individual bus station). In addition, a special column, usually named geom or geometry, stores the geometry data of sf objects. For a bus station, that would likely be a single point representing its coordinate of the bus station. By contrast, a line or a polygon consist of multiple points. Still, these points only correspond to one row in the attribute table. This works since sf stores the geometry in the form of a list. The list elements correspond to the number of observations in the attribute table. But each list element can contain more than one coordinate if required or even another list as it is the case for polygons with holes (see previous sections). This structure enables multiple columns to represent a range of attributes for thousands of features (one row per feature). This chapter focuses on non-geographical operations such as subsetting, aggregating or joining attribute data. Note that the corresponding functions also have a geographical equivalent. Sometimes you can even use the same functions for attribute and spatial operations. This is, for example, the case for subsetting as base R’s [ and tidyverse’s filter() let you also subset spatial data based on the spatial extent of another spatial object (see Chapter 4). That is, the skills you learn here are cross-transferable which is also why this chapter lays the foundation for the next chapter (Chapter 4) which extends the here presented methods to the spatial world. As outlined in Chapter 2, sf provided support for simple features in R and made them work with generic R functions such as plot() and summary() (as can be seen by executing methods(&quot;summary&quot;) and/or methods(&quot;plot&quot;)). The reliable data.frame (and modifications to it such as the tibble class used in the tidyverse) is the basis for data analysis in R. Extending this system to work with spatial data has many advantages. The most important one is that the accumulated know-how in the R community for handling data frames can be transferred to geographic attribute data. Before proceeding to perform various attribute operations on a dataset, let’s explore its structure. To find out more about the structure of our use case dataset world, we use base R functions for working with tabular data such as nrow() and ncol(): dim(world) # it is a 2 dimensional object, with rows and columns #&gt; [1] 177 11 nrow(world) # how many rows? #&gt; [1] 177 ncol(world) # how many columns? #&gt; [1] 11 Our dataset contains ten non-geographical columns (and one geometry list-column) with almost 200 rows representing the world’s countries. Extracting the attribute data of an sf object is the same as removing its geometry: world_df = st_set_geometry(world, NULL) class(world_df) #&gt; [1] &quot;data.frame&quot; This can be useful if the geometry column causes problems, e.g., by occupying large amounts of RAM, or to focus the attention on the attribute data. For most cases, however, there is no harm in keeping the geometry column because non-spatial data operations on sf objects act only on the attribute data. For this reason, being good at working with attribute data of spatial objects is the same as being proficient at handling data frames in R. For many applications, dplyr offers the most effective and most intuitive approach of working with data frames, as we will see in the next section.19 This chapter focuses on dplyr because of its intuitive function names and ability to perform multiple chained operations using the pipe operator. 3.2 Attribute subsetting Because simple feature objects are also data frames (run class(world)to verify), you can use a wide range of functions (from base R and other packages) for subsetting them. Base R subsetting functions include [, subset() and $. dplyr subsetting functions include select(), filter(), and pull(). Both sets of functions preserve the spatial components of the data. The [ operator can subset both rows and columns. You use indices to specify the elements you wish to extract from an object, e.g., object[i, j] with i and j representing rows and columns. The indices can be either numeric, indicating position, or character strings, indicating row or column names. Leaving i or j empty, simply returns all rows or columns. For instance, object[1:5, ] returns the first five rows and all columns. Below, we demonstrate how to use base R subsetting (results not shown - try running this on your own computer to check the output is as expected): world[1:6, ] # subset rows by position world[, 1:3] # subset columns by position world[, c(&quot;name_long&quot;, &quot;lifeExp&quot;)] # subset columns by name The [ subsetting operator also accepts logical vectors consisting of TRUE and FALSE elements. The following code chunk, for example, creates a new object, small_countries, which only contains nations whose surface area is smaller than 100,000 km2: sel_area = world$area_km2 &lt; 10000 summary(sel_area) #&gt; Mode FALSE TRUE #&gt; logical 170 7 small_countries = world[sel_area, ] Note that we created the intermediary sel_object, a logical vector, for illustration purposes, and to show that only seven countries match our query. A more concise command, that omits the intermediary object, generates the same result: small_countries = world[world$area_km2 &lt; 10000, ] Another the base R function subset() provides yet another way to achieve the same result: small_countries = subset(world, area_km2 &lt; 10000) You can use the $ operator to select a specific variable by its name. The result is a vector: world$name_long Base R functions are essential, and we recommend that you have a working knowledge of them. However, dplyr often makes working with data frames easier. Moreover, dplyr is usually much faster than base R since it makes use of C++ in the background. This comes in especially handy when working with large data sets. As a special bonus, dplyr is compatible with sf objects. The main dplyr subsetting functions are select(), slice(), filter() and pull(). The select() function selects columns by name or position. For example, you could select only two columns, name_long and pop, with the following command (note the geom column remains): world1 = select(world, name_long, pop) names(world1) #&gt; [1] &quot;name_long&quot; &quot;pop&quot; &quot;geom&quot; select() also allows subsetting of a range of columns with the help of the : operator: # all columns between name_long and pop (inclusive) world2 = select(world, name_long:pop) names(world2) #&gt; [1] &quot;name_long&quot; &quot;continent&quot; &quot;region_un&quot; &quot;subregion&quot; &quot;type&quot; &quot;area_km2&quot; #&gt; [7] &quot;pop&quot; &quot;geom&quot; Omit specific columns with the - operator: # all columns except subregion and area_km2 (inclusive) world3 = select(world, -subregion, -area_km2) Conveniently, select() lets you subset and rename columns at the same time, for example: world4 = select(world, name_long, population = pop) names(world4) #&gt; [1] &quot;name_long&quot; &quot;population&quot; &quot;geom&quot; This is more concise than the base R equivalent: world5 = world[, c(&quot;name_long&quot;, &quot;pop&quot;)] # subset columns by name names(world5)[2] = &quot;population&quot; # rename column manually select() also works with ‘helper functions’ for advanced subsetting operations, including contains(), starts_with() and num_range() (see the help page with ?select for details). slice() is the row-equivalent of select(). The following code chunk, for example, selects the 3rd to 5th rows: slice(world, 3:5) filter() is dplyr’s equivalent of base R’s subset() function. It keeps only rows matching given criteria, e.g., only countries with a very high average of life expectancy: # only countries with a life expectation larger than 82 years world6 = filter(world, lifeExp &gt; 82) The standard set of comparison operators can be used in the filter() function: Symbol Name == Equal to != Not equal to &gt; Greater than &gt;= Greater than or equal &lt; Less than &lt;= Less than or equal &amp; And | Or ! Not Finally, we would like to introduce the special pipe operator (%&gt;%) of the magrittr package. The pipe operator feeds (‘pipes forward’) the output of one function into the first argument of the next function. Combining many functions together with pipes is called chaining or piping. For example, let us first take the world dataset, then let us select the two columns named name_long and continent, and then we just would like to return the first five rows. world %&gt;% select(name_long, continent) %&gt;% slice(1:5) #&gt; Simple feature collection with 5 features and 2 fields #&gt; geometry type: MULTIPOLYGON #&gt; dimension: XY #&gt; bbox: xmin: -180 ymin: -90 xmax: 180 ymax: 83.64513 #&gt; epsg (SRID): 4326 #&gt; proj4string: +proj=longlat +datum=WGS84 +no_defs #&gt; # A tibble: 5 x 3 #&gt; name_long continent geom #&gt; &lt;chr&gt; &lt;chr&gt; &lt;simple_feature&gt; #&gt; 1 Afghanistan Asia &lt;MULTIPOLYGON...&gt; #&gt; 2 Angola Africa &lt;MULTIPOLYGON...&gt; #&gt; 3 Albania Europe &lt;MULTIPOLYGON...&gt; #&gt; 4 United Arab Emirates Asia &lt;MULTIPOLYGON...&gt; #&gt; # ... with 1 more rows The pipe operator supports an intuitive data analysis workflow. It allows operations to be written in a clear order, line-by-line and from left to right (as with most languages), avoiding ‘nesting’, whereby one function is burried inside another (without pipes the code in the previous chunk would be written as slice(select(world, name_long, continent), 1:5) which is harder for most people to read, write and understand). Another advantage over the nesting approach is that you can easily comment out certain parts of a pipe. dplyr works especially well with the pipe operator because its fundamental functions (or ‘verbs’, like select()) expect a data frame object as input and also return one.20 3.3 Attribute data aggregation The dplyr equivalent is summarize(), which returns summary statistics of groups and variables defined by the user. The following code, for example, calculates the total population and number of all countries in the world: # customized data summary world_summary = world %&gt;% summarize(pop = sum(pop, na.rm = TRUE), country_n = n()) world_summary #&gt; Simple feature collection with 1 feature and 2 fields #&gt; geometry type: MULTIPOLYGON #&gt; dimension: XY #&gt; bbox: xmin: -180 ymin: -90 xmax: 180 ymax: 83.64513 #&gt; epsg (SRID): 4326 #&gt; proj4string: +proj=longlat +datum=WGS84 +no_defs #&gt; pop country_n geom #&gt; 1 7.21e+09 177 MULTIPOLYGON(((-159.2081835... The new object, world_summary, is an aggregation of all 177 world’s countries. It consists of one row and two columns. The pop = and country_n = created the names of the two columns, while the sum()- and n()-function actually did the aggregation. The first function added up all inhabitants, while the latter simply counted the number of rows. You can use a wide range of functions within summarize() for aggregation and summary purposes. Type ?summarize for a list with useful functions and more information. summarize() becomes even more powerful when combined with group_by(), which allows simultaneous aggregate/summary operations per group, analogous to the base R function aggregate(). The following code chunk calculates the total population and number of countries per continent (see Chapter 5 of R for Data Science for a more detailed overview of summarize()): # data summary by groups world_continents = world %&gt;% group_by(continent) %&gt;% summarize(pop = sum(pop, na.rm = TRUE), country_n = n()) world_continents #&gt; Simple feature collection with 8 features and 3 fields #&gt; geometry type: GEOMETRY #&gt; dimension: XY #&gt; bbox: xmin: -180 ymin: -90 xmax: 180 ymax: 83.64513 #&gt; epsg (SRID): 4326 #&gt; proj4string: +proj=longlat +datum=WGS84 +no_defs #&gt; # A tibble: 8 x 4 #&gt; continent pop country_n geom #&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;simple_feature&gt; #&gt; 1 Africa 1.15e+09 51 &lt;MULTIPOLYGON...&gt; #&gt; 2 Antarctica 0.00e+00 1 &lt;MULTIPOLYGON...&gt; #&gt; 3 Asia 4.31e+09 47 &lt;MULTIPOLYGON...&gt; #&gt; 4 Europe 7.39e+08 39 &lt;MULTIPOLYGON...&gt; #&gt; # ... with 4 more rows sf objects are well-integrated with the tidyverse, as illustrated by the fact that the aggregated objects preserve the geometry of the original world object. What is more, under the hood sf is already doing a spatial aggregation of polygon data which is known as ‘dissolving polygons’ in the GIS world - an operation we will explain in more detail in the the next chapter. This means that summaries of the world’s continents can be plotted spatially, as illustrated below, which generates a plot of population by continent (note that borders between countries have largely been removed): plot(world_continents[&quot;pop&quot;]) Figure 3.1: Geographic representation of attribute aggregation by continent: total population by continent generated by summarize(). Using the base R function aggregate() you can obtain the same result with a slightly different syntax: you have to indicate the grouping variable as a list-object: ag_var = list(world$continent) world_continents2 = aggregate(world[&quot;pop&quot;], by = ag_var, FUN = sum, na.rm = TRUE) 3.4 Attribute data joining Combining data from different sources is one of the most common tasks in data preparation. Joins are methods to combine pair of tables based on a shared key variable. The dplyr package has a set of verbs to easily join data.frames - left_join(), right_join(), inner_join(), full_join, semi_join() and anti_join(). These function names follow conventions used in the database language SQL, as explained in Chapter 13 of R for Data Science (Grolemund and Wickham 2016). Working with spatial data, however, usually involves a connection between spatial data (sf objects) and tables (data.frame objects). Fortunately, the sf package has all of the dplyr join functions adapted to work with sf objects. The only important difference between combining two data.frames and combining sf and data.frame objects is the special sf column storing the geometry information. Therefore, the result of data joins can be either an sf or data.frame object. The easiest way to understand the concept of joins is to show how they work with a smaller dataset. We will use an sf object north_america with country codes (iso_a2), names and geometries, as well as a data.frame object wb_north_america containing information about urban population and unemployment for three countries. It is important to add that the first object contains data about Canada, Greenland and the United States and the second one about Canada, Mexico and the United States: north_america = world %&gt;% filter(subregion == &quot;Northern America&quot;) %&gt;% select(iso_a2, name_long) north_america #&gt; Simple feature collection with 3 features and 2 fields #&gt; geometry type: MULTIPOLYGON #&gt; dimension: XY #&gt; bbox: xmin: -171.7911 ymin: 18.91619 xmax: -12.20855 ymax: 83.64513 #&gt; epsg (SRID): 4326 #&gt; proj4string: +proj=longlat +datum=WGS84 +no_defs #&gt; iso_a2 name_long geom #&gt; 1 CA Canada MULTIPOLYGON(((-63.6645 46.... #&gt; 2 GL Greenland MULTIPOLYGON(((-46.76379 82... #&gt; 3 US United States MULTIPOLYGON(((-155.54211 1... plot(north_america[0]) wb_north_america = worldbank_df %&gt;% filter(name %in% c(&quot;Canada&quot;, &quot;Mexico&quot;, &quot;United States&quot;)) %&gt;% select(name, iso_a2, urban_pop, unemploy = unemployment) wb_north_america #&gt; name iso_a2 urban_pop unemploy #&gt; 1 Canada CA 29022137 6.91 #&gt; 2 Mexico MX 99018446 5.25 #&gt; 3 United States US 259740511 6.17 In this book, we focus on spatial data. Most of the following join examples will have a sf object as the first argument and a data.frame object as the second argument which results in a new sf object. However, the reverse order is also possible and will give you back a data.frame object. This is mostly beyond the scope of this book, but we encourage you to try it. The next subsections focuses on the commonly used left and inner joins, which use the same syntax as the other join types (Grolemund and Wickham 2016). 3.4.1 Left joins Left joins are the most commonly used operation for adding attributes to spatial data. The left_join() returns all observations from the left object (north_america) and the matched observations from the right object (wb_north_america). In cases, like Greenland, absent in the right object, NA values will show up. To join two objects we need to specify a key. This is a variable (or a set of variables) that uniquely identifies each observation (row). The by argument of dplyr’s join functions lets you identify the key variable. In simple cases, a single, unique variable exist in both objects like the iso_a2 column in our example: left_join1 = north_america %&gt;% left_join(wb_north_america, by = &quot;iso_a2&quot;) left_join1 #&gt; Simple feature collection with 3 features and 5 fields #&gt; geometry type: MULTIPOLYGON #&gt; dimension: XY #&gt; bbox: xmin: -171.7911 ymin: 18.91619 xmax: -12.20855 ymax: 83.64513 #&gt; epsg (SRID): 4326 #&gt; proj4string: +proj=longlat +datum=WGS84 +no_defs #&gt; iso_a2 name_long name urban_pop unemploy #&gt; 1 CA Canada Canada 29022137 6.91 #&gt; 2 GL Greenland &lt;NA&gt; NA NA #&gt; 3 US United States United States 259740511 6.17 #&gt; geom #&gt; 1 MULTIPOLYGON(((-63.6645 46.... #&gt; 2 MULTIPOLYGON(((-46.76379 82... #&gt; 3 MULTIPOLYGON(((-155.54211 1... It is also possible to join objects by different variables. Both of the datasets have variables with names of countries, but they are named differently. The north_america has a name_long column and the wb_north_america has a name column. In these cases, we can use a named vector to specify the connection, e.g. c(&quot;name_long&quot; = &quot;name&quot;): left_join2 = north_america %&gt;% left_join(wb_north_america, by = c(&quot;name_long&quot; = &quot;name&quot;)) left_join2 #&gt; Simple feature collection with 3 features and 5 fields #&gt; geometry type: MULTIPOLYGON #&gt; dimension: XY #&gt; bbox: xmin: -171.7911 ymin: 18.91619 xmax: -12.20855 ymax: 83.64513 #&gt; epsg (SRID): 4326 #&gt; proj4string: +proj=longlat +datum=WGS84 +no_defs #&gt; iso_a2.x name_long iso_a2.y urban_pop unemploy #&gt; 1 CA Canada CA 29022137 6.91 #&gt; 2 GL Greenland &lt;NA&gt; NA NA #&gt; 3 US United States US 259740511 6.17 #&gt; geom #&gt; 1 MULTIPOLYGON(((-63.6645 46.... #&gt; 2 MULTIPOLYGON(((-46.76379 82... #&gt; 3 MULTIPOLYGON(((-155.54211 1... The new object left_join2, however, contains two duplicated variables - iso_a2.x and iso_a2.y because both of the input tables possessed a variable named iso_a2. To solve this problem we should specify all the keys: left_join3 = north_america %&gt;% left_join(wb_north_america, by = c(&quot;iso_a2&quot;, &quot;name_long&quot; = &quot;name&quot;)) left_join3 #&gt; Simple feature collection with 3 features and 4 fields #&gt; geometry type: MULTIPOLYGON #&gt; dimension: XY #&gt; bbox: xmin: -171.7911 ymin: 18.91619 xmax: -12.20855 ymax: 83.64513 #&gt; epsg (SRID): 4326 #&gt; proj4string: +proj=longlat +datum=WGS84 +no_defs #&gt; iso_a2 name_long urban_pop unemploy geom #&gt; 1 CA Canada 29022137 6.91 MULTIPOLYGON(((-63.6645 46.... #&gt; 2 GL Greenland NA NA MULTIPOLYGON(((-46.76379 82... #&gt; 3 US United States 259740511 6.17 MULTIPOLYGON(((-155.54211 1... It is also possible to use our objects in the reverse order, where a data.frame object is the first argument and a sf object is the second argument. This would keep the geometry column but drop the sf class, and result in a data.frame object. # keeps the geom column, but drops the sf class left_join4 = wb_north_america %&gt;% left_join(north_america, by = c(&quot;iso_a2&quot;)) left_join4 #&gt; name iso_a2 urban_pop unemploy name_long #&gt; 1 Canada CA 29022137 6.91 Canada #&gt; 2 Mexico MX 99018446 5.25 &lt;NA&gt; #&gt; 3 United States US 259740511 6.17 United States #&gt; geom #&gt; 1 MULTIPOLYGON(((-63.6645 46.... #&gt; 2 NULL #&gt; 3 MULTIPOLYGON(((-155.54211 1... class(left_join4) #&gt; [1] &quot;data.frame&quot; left_join4 has only one class - data.frame, however it is possible to add spatial sf class using the st_as_sf() function: left_join4_sf = st_as_sf(left_join4) left_join4_sf #&gt; Simple feature collection with 3 features and 5 fields (with 1 geometry empty) #&gt; geometry type: MULTIPOLYGON #&gt; dimension: XY #&gt; bbox: xmin: -171.7911 ymin: 18.91619 xmax: -12.20855 ymax: 83.64513 #&gt; epsg (SRID): 4326 #&gt; proj4string: +proj=longlat +datum=WGS84 +no_defs #&gt; name iso_a2 urban_pop unemploy name_long #&gt; 1 Canada CA 29022137 6.91 Canada #&gt; 2 Mexico MX 99018446 5.25 &lt;NA&gt; #&gt; 3 United States US 259740511 6.17 United States #&gt; geom #&gt; 1 MULTIPOLYGON(((-63.6645 46.... #&gt; 2 MULTIPOLYGON() #&gt; 3 MULTIPOLYGON(((-155.54211 1... class(left_join4_sf) #&gt; [1] &quot;sf&quot; &quot;data.frame&quot; On the other hand, it is also possible to remove the geometry column of left_join4 using base R functions or dplyr. Here, this is this simple because the geometry column is just another data.frame column and no longer the sticky geometry column of an sf object (see also Chapter 2): # base R left_join4_df = subset(left_join4, select = -geom) # or dplyr left_join4_df = left_join4 %&gt;% select(-geom) left_join4_df #&gt; name iso_a2 urban_pop unemploy name_long #&gt; 1 Canada CA 29022137 6.91 Canada #&gt; 2 Mexico MX 99018446 5.25 &lt;NA&gt; #&gt; 3 United States US 259740511 6.17 United States class(left_join4_df) #&gt; [1] &quot;data.frame&quot; 3.4.2 Inner joins The inner_join() keeps only observations from the left object (north_america) where there are matching observations in the right object (wb_north_america). Additionally, all columns from the left and right object are kept: inner_join1 = north_america %&gt;% inner_join(wb_north_america, by = c(&quot;iso_a2&quot;, &quot;name_long&quot; = &quot;name&quot;)) inner_join1 #&gt; Simple feature collection with 2 features and 4 fields #&gt; geometry type: MULTIPOLYGON #&gt; dimension: XY #&gt; bbox: xmin: -171.7911 ymin: 18.91619 xmax: -52.6481 ymax: 83.23324 #&gt; epsg (SRID): 4326 #&gt; proj4string: +proj=longlat +datum=WGS84 +no_defs #&gt; iso_a2 name_long urban_pop unemploy geom #&gt; 1 CA Canada 29022137 6.91 MULTIPOLYGON(((-63.6645 46.... #&gt; 2 US United States 259740511 6.17 MULTIPOLYGON(((-155.54211 1... 3.5 Attribute data creation Often, we would like to create a new column based on already existing columns. For example, we want to calculate population density for each country. For this we need to divide a population column, here pop, by an area column , here area_km2 with unit area in square km. Using base R, we can type: data(&quot;world&quot;) world_new = world # do not overwrite our original data world_new$pop_dens = world_new$pop / world_new$area_km2 Alternatively, we can use one of dplyr functions - mutate() or transmute(). mutate() adds new columns at the penultimate position in the sf object (the last one is reserved for the geometry): world %&gt;% mutate(pop_dens = pop / area_km2) The difference between mutate() and transmute() is that the latter skips all other existing columns (except for the sticky geometry column): world %&gt;% transmute(pop_dens = pop / area_km2) Existing columns could be also paste together using unite(). For example, we want to stick together continent and region_un columns into a new con_reg column. We could specify a separator to use between values and if input columns should be removed: world_unite = world %&gt;% unite(con_reg, continent:region_un, sep = &quot;:&quot;, remove = TRUE) The separate() function is the complement of the unite() function. Its role is to split one column into multiple columns using either a regular expression or character position. world_separate = world_unite %&gt;% separate(con_reg, c(&quot;continent&quot;, &quot;region_un&quot;), sep = &quot;:&quot;) Two helper functions, rename() and set_names can be used to change columns names. The first one, rename() replace an old name with a new one. For example, we want to change a name of column from name_long to name: world %&gt;% rename(name = name_long) set_names can be used to change names of many columns. In this function, we do not need to provide old names: new_names = c(&quot;ISO_A2&quot;, &quot;Name&quot;, &quot;Continent&quot;, &quot;Region&quot;, &quot;Subregion&quot;, &quot;Country_type&quot;, &quot;Area_in_km2&quot;, &quot;Population&quot;, &quot;Life_Expectancy&quot;, &quot;GDP_per_capita&quot;, &quot;geom&quot;) world %&gt;% set_names(new_names) 3.6 Removing spatial information It is important to note that the attribute data operations preserve the geometry of the simple features. As mentioned at the outset of the chapter, however, it can be useful to remove the geometry. In the case of the world dataset, this can be done using st_set_geometry()21. world_data = world %&gt;% st_set_geometry(NULL) class(world_data) #&gt; [1] &quot;data.frame&quot; 3.7 Exercises For these exercises we’ll use the us_states and us_states_df datasets from the spData package: library(spData) data(&quot;us_states&quot;) data(&quot;us_states_df&quot;) us_states is a spatial object (of class sf), containing geometry and a few attributes (including name, region, area, and population) of states within the contiguous United States. us_states_df is a data frame (of class data.frame) containing the name and additional variables (including median income and poverty level, for years 2010 and 2015) of US states, including Alaska, Hawaii and Puerto Rico. The data comes from the US Census Bureau, and is documented in ?us_states and ?us_states_df. Create a new object called us_states_name that contains only the NAME column from the us_states object. What is the class of the new object? Select columns from the us_states object which contain population data. Obtain the same result using a different command (bonus: try to find 3 ways of obtaining the same result). Hint: try to use helper functions, such as contains or starts_with from dplyr (see ?contains). Find all states with the following characteristics (bonus find and plot them): Belongs to the Midwest region Belongs to the West region, has an area below 250,000 km2 and 20015 population greater than 5,000,000 residents (hint: you may need to use the function units::set_units() or as.numeric()) Belongs to the South region, had an area larger than 150,000 km2 or total population in 2015 larger than 7,000,000 residents What was the total population in 2015 in the us_states dataset? What was the minimum and maximum total population in 2015? How many states are there in each region? What was the minimum and maximum total population in 2015 in each region? What was the total population in 2015 in each region? Add variables from us_states_df to us_states and create a new object called us_states_stats. What function did you use and why? Which variable is the key in the both datasets? What is the class of a new object? us_states_df has two more variables than us_states. How you can find them? (hint: try to use the dplyr::anti_join function) What was the population density in 2015 in each state? What was the population density in 2010 in each state? How much has population density changed between 2010 and 2015 in each state? Calculate the change in percentages and map them. Change the columns names in us_states to lowercase. (Hint: helper functions - tolower() and colnames() may help). Using us_states and us_states_df create a new object called us_states_sel. The new object should have only two variables - median_income_15 and geometry. Change the name of the median_income_15 column to Income. Calculate the change in median income between 2010 and 2015 for each state. Bonus: what was the minimum, average and maximum median income in 2015 for each region? What is the region with the largest increase of the median income? References "],
["spatial-data-operations.html", "4 Spatial data operations Prerequisites 4.1 Introduction 4.2 Spatial subsetting 4.3 Spatial data aggregation 4.4 Spatial data joining 4.5 Spatial data creation", " 4 Spatial data operations Prerequisites This chapter requires tidyverse, sf, units, and spData packages: library(sf) library(tidyverse) library(units) You must have loaded the world data from the spData package: library(spData) 4.1 Introduction 4.2 Spatial subsetting Spatial subsetting is the process of selecting only those features of a spatial object that in some way intersect with another spatial object. Note that ‘intersect’ in this context has a precise meaning: if y is used to subset features in a ‘target’ object of x, any features in x that touch, overlap or are within features in y will be selected. Intersect is the default operation for spatial subsetting but others can be used using the op = argument.22 There are 9 well-defined operations that can be used for spatial subsetting, covered in section 4.5.1. This may seem daunting but the good news is that you do not have to learn all of them separately: after you understand how to spatially subset objects that intersect another (via st_intersects()) it is easy to subset based on other types of spatial operation such as st_touches(), st_crosses() and st_within(). For this reason now we focus only pn one of the spatial subsetting operations. We use st_intersects() instead of any of the others not only because it the default when subsetting with [, but also st_intersects() is useful as a ‘catch all’ that identifies all types of spatial relations. In general terms, spatial subsetting is simply the spatial equivalent of attribute subsetting. However, to do spatial subsetting two spatial objects are needed the spatial relation between which is to be established. As with attribute subsetting, spatial subsetting is a binary operation: an object is either selected or not. As in section 3.2, we start with base methods before describing how to do it in the tidyverse. Attribute subsetting in base R is done with the [ operator and passing into the square brackets a vector of class integer (whole numbers) or logical (a vector of TRUEs and FALSEs). This means world[1:6,] subsets the first 6 countries of the world and that world[world$area_km2 &lt; 10000,] returns the subset of countries that have a small surface area. For this chapter we will use countries in Africa, which can be generated using this method as follows:23 africa_wgs = world[world$subregion == &quot;Western Africa&quot;, ] To further set-up the input data, we will reproject the data to the coordinate reference system (CRS) 32630 (it’s EPSG code, explained in Chapter 6): africa = st_transform(africa_wgs, crs = 32630) Spatial subsetting in base R use the same method as attribute subsetting, except another spatial object is placed inside the square brackets in the place of an integer or logical vector. This is a concise and consistent syntax, as shown in the next code chunk. Let’s test it with a hypothetical scenario: we want to subset all countries within 20 degrees of the point where the equator (where latitude = 0 degrees) intersects the prime meridian (longitude = 0 degrees), as illustrated in Figure 4.1. The subsetting object is created below. Note that this must have the same CRS as the target object (set with the crs argument): center = st_sf(st_sfc(st_point(c(0, 0)), crs = 4326)) buff = st_buffer(x = center, dist = 20) buff = st_transform(buff, 32630) Figure 4.1: Hypothetical subsetting scenario: select all countries which intersect with a circle of 20 degrees in radius around planet Earth. Figure created with the globe package. The data to be subset, or ‘target layer’, is the africa created above, which has a projected CRS (32630). Now that the input data is set-up, the spatial subsetting operation is a single, concise command: africa_buff = africa[buff,] Note that the command emits a message: about assuming planar coordinates. This is because spatial operations (especially distance and area calculations) cannot be assumed to be accurate in a geographic (longitude/latitude) CRS. In this case there is a clear justification: the data is close to the equator where there is least distortion caused by the curvature of the earth, and the example illustrates the method, which would more usually be used on pojected (‘planar’) data. In any case, the spatial subsetting clearly worked. As illustrated by Figure ??, only countries which spatially intersect with the giant circle are returned: # plot(africa_buff[&quot;pop&quot;]) # plot(buff, add = TRUE) Note that countries that only just touch the giant circle are selected such as the large country at the north of plot (Algeria). st_relates() includes countries that only touch (but are not within or overlapping with) the selection object. Other spatial subsetting operations such as st_within() are more conservative, as shown in section 4.5.1. Before we progress to explore the differences between different spatial subsetting operations, it is worth seeing alternative ways to acheive the same result, to deepen understanding of what is going on ‘under the hood’ (vital for developing advanced geocomputation applications). The second way to reproduce the subsetting operation illustrated in Figure ?? simply involves expanding the operation over 2 lines: sel_buff = st_intersects(x = africa, y = buff, sparse = FALSE) africa_buff2 = africa[sel_buff, ] The third way is essentially the same as the second, but uses the filter() function introduced in section 3.2, forming the foundations of a ‘tidy’ spatial data analysis workflow. If you already use dplyr for data manipulation, this way should seem familiar: africa_buff3 = africa %&gt;% filter(st_intersects(x = ., y = buff, sparse = FALSE)) How can we be sure that the results obtained through the 4 subsetting operations demonstrated above? We can test them as follows: identical(x = africa_buff, y = africa_buff2) #&gt; [1] TRUE identical(x = africa_buff, y = africa_buff3) #&gt; [1] FALSE The reason that the third spatially subset object (africa_buff3) is not identical is that dplyr changes the row names: head(row.names(africa_buff)) #&gt; [1] &quot;14&quot; &quot;15&quot; &quot;32&quot; &quot;60&quot; &quot;61&quot; &quot;62&quot; head(row.names(africa_buff3)) #&gt; [1] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; &quot;5&quot; &quot;6&quot; If the row names are re-set, the objects become identical: attr(africa_buff3, &quot;row.names&quot;) = attr(x = africa_buff, &quot;row.names&quot;) identical(africa_buff, africa_buff3) #&gt; [1] TRUE Note This discarding of row names is not something that is specific to spatial data:24 row.names(africa[africa$subregion == &quot;Northern Europe&quot;,]) #&gt; character(0) row.names(filter(africa, subregion == &quot;Northern Europe&quot;)) #&gt; character(0) 4.3 Spatial data aggregation Like attribute data aggregation, covered in section 3.3, spatial data aggregation is a way of condensing data. Aggregated data show some statistic about a variable (typically mean average or total) in relation to some kind of grouping variable. For attribute data aggregation the grouping variable is another variable, typically one with few unique values relative to the number of rows. The continent variable in the world dataset is a good example: there are only 8 unique continents but 177 countries. In section 3.3 the aggregation process condensed the world dataset down into only 8 rows and an aggregated pop variable representing the total population per continent (see Figure 3.1). Spatial data aggregation is the same conceptually but uses a spatial grouping object: the output is the same, in terms of number of rows/features and geometry, as the grouping object, but with new variables corresponding to the input dataset. As with spatial subsetting, spatial aggregation operations work by extending existing functions. Since mid-2017 (with the release of sf 0.5-3) the base R function aggregate() works with a spatial object as a grouping variable. Building on the example presented the previous section (4.2), we demonstrate this by aggregating the population of countries that intersect with the buffer represented by the circular buff object created in the previous section. buff_agg = aggregate(x = africa[&quot;pop&quot;], by = buff, FUN = sum) The result, buff_agg, is a spatial object with the same geometry as by (the circular buffer in this case) but with an additional variable, pop reporting summary statistics for all features in x that intersect with by (the total population of the countries that touch the buffer in this case). Plotting the result (with plot(buff_agg)) shows that the operation does not really make sense: Figure 4.2 shows a population of over half a billion people mostly located in a giant circle floating off the west coast of Africa! Figure 4.2: Result of spatial aggregation showing the total population of countries that intersect with a large circle whose center lies at 0 degrees longitude and latituge The results of the spatial aggregation exercise presented in Figure 4.2 are unrealistic for three reasons: People do not live in the sea (the geometry of the aggregating object is not appropriate for the geometry target object). This method would ‘double count’ countries whose borders cross aggregating polygons when multiple, spatially contiguous, features are used as the aggregating object. It is wrong to assume that all the people living in countries that touch the buffer reside within it (the default spatial operator st_intersects() is too ‘greedy’). The most extreme example of this is Algeria, the most northerly country selected: the spatial aggregation operation assumes that all 39 million Algerian citizens reside in the tiny southerly tip that is within the circular buffer. A number of methods can be used to overcome these issues, which result in unrealistically high population attributed to the circular buffer illustrated in Figure 4.2. The simplest of these is to convert the country polygons into points representing their geographic centroids before aggregation. This would ensure that any spatially contiguous aggregating object covering the target object (the Earth in this case) would result in the same total: there would be no double counting. The estimated total population residing within the study area would be more realistic if geographic centroids were used. (The centroid of Algeria, for example, is far outside the aggregating buffer.) Except in cases where the number of target features per aggregating feature is very large, or where the aggregating object is spatially congruent with the target (covered in section 4.3.1), using centroids can also lead to errors due to boundary effects: imagine a buffer that covers a large area but contains no centroids. These issues can be tackled when aggregating areal target data with areal interpolation. 4.3.1 Spatial congruence and areal interpolation Spatial congruence is an important concept related to spatial aggregation. An aggregating object object (which we will refer to as y, representing the buffer object in the previous section) is congruent with the target object (x, representing the countries in the previous section) if the two objects have shared borders. Incongruent aggregating objects, by contrast, do not share common borders with the target (Qiu, Zhang, and Zhou 2012). This is problematic for spatial aggregation (and other spatial operations) illustrated in Figure 4.3. Areal interpolation resolves this issue. A number of algorithms have been developed for areal interpolation, including area weighted and pycnophylactic interpolation methods task (Tobler 1979). Figure 4.3: Illustration of congruent (left) and incongruent (right) areal units. The simplest useful method for spatial interpolation is area weighted spatial interpolation. This is implemented in st_interpolate_aw(), as demonstrated below: buff_agg_aw = st_interpolate_aw(x = africa[&quot;pop&quot;], to = buff, extensive = TRUE) #&gt; Warning in st_interpolate_aw(x = africa[&quot;pop&quot;], to = buff, extensive = #&gt; TRUE): st_interpolate_aw assumes attributes are constant over areas of x 4.4 Spatial data joining 4.5 Spatial data creation # add a new column africa$area = set_units(st_area(africa), value = km^2) africa$pop_density = africa$pop / africa$area # OR africa = africa %&gt;% mutate(area = set_units(st_area(.), value = km^2)) %&gt;% mutate(pop_density = pop / area) Note that this has created a attributes for the area and population density variables: attributes(africa$area) #&gt; $units #&gt; $numerator #&gt; [1] &quot;km&quot; &quot;km&quot; #&gt; #&gt; $denominator #&gt; character(0) #&gt; #&gt; attr(,&quot;class&quot;) #&gt; [1] &quot;symbolic_units&quot; #&gt; #&gt; $class #&gt; [1] &quot;units&quot; attributes(africa$pop_density) #&gt; $units #&gt; $numerator #&gt; character(0) #&gt; #&gt; $denominator #&gt; [1] &quot;km&quot; &quot;km&quot; #&gt; #&gt; attr(,&quot;class&quot;) #&gt; [1] &quot;symbolic_units&quot; #&gt; #&gt; $class #&gt; [1] &quot;units&quot; These can be set to NULL as follows: attributes(africa$area) = NULL attributes(africa$pop_density) = NULL 4.5.1 Topological relations a1 = st_polygon(list(rbind(c(-1, -1), c(1, -1), c(1, 1), c(-1, -1)))) a2 = st_polygon(list(rbind(c(2, 0), c(2, 2), c(3, 2), c(3, 0), c(2, 0)))) a = st_sfc(a1, a2) b1 = a1 * 0.5 b2 = a2 * 0.4 + c(1, 0.5) b = st_sfc(b1, b2) l1 = st_linestring(x = matrix(c(0, 3, -1, 1), , 2)) l2 = st_linestring(x = matrix(c(-1, -1, -0.5, 1), , 2)) l = st_sfc(l1, l2) p = st_multipoint(x = matrix(c(0.5, 1, -1, 0, 1, 0.5), , 2)) plot(a, border = &quot;red&quot;, axes = TRUE) plot(b, border = &quot;green&quot;, add = TRUE) plot(l, add = TRUE) plot(p, add = TRUE) Equals: st_equals(a, b, sparse = FALSE) Contains: st_contains(a, b, sparse = FALSE) st_contains_properly(a, b, sparse = FALSE) Covers: st_covers(a, b, sparse = FALSE) st_covered_by(a, b, sparse = FALSE) Within: st_within(a, b, sparse = FALSE) Overlaps: st_overlaps(a, b, sparse = FALSE) Intersects: st_intersects(a, b, sparse = FALSE) Disjoint: st_disjoint(a, b, sparse = FALSE) Touches: st_touches(a, b, sparse = FALSE) Crosses: st_crosses(a, b, sparse = FALSE) DE9-IM - https://en.wikipedia.org/wiki/DE-9IM st_relate(a, b, sparse = FALSE) 4.5.2 Distance relations st_distance(a, b) 4.5.3 Spatial clipping Spatial clipping is a form of spatial subsetting that involves changes to the geometry columns of at least some of the affected features. Clipping can only apply to features more complex than points: lines, polygons and their ‘multi’ equivalents. To illustrate the concept we will start with a simple example: two overlapping circles with a centrepoint 1 unit away from each other and radius of 1: b = st_sfc(st_point(c(0, 1)), st_point(c(1, 1))) # create 2 points b = st_buffer(b, dist = 1) # convert points to circles l = c(&quot;x&quot;, &quot;y&quot;) plot(b) text(x = c(-0.5, 1.5), y = 1, labels = l) # add text Figure 4.4: Overlapping circles. Imagine you want to select not one circle or the other, but the space covered by both x and y. This can be done using the function st_intersection(), illustrated using objects named x and y which represent the left and right-hand circles: x = b[1] y = b[2] x_and_y = st_intersection(x, y) plot(b) plot(x_and_y, col = &quot;lightgrey&quot;, add = TRUE) # color intersecting area The subsequent code chunk demonstrate how this works for all combinations of the ‘venn’ diagram representing x and y, inspired by Figure 5.1 of the book R for Data Science (Grolemund and Wickham 2016). Figure 4.5: Spatial equivalents of logical operators To illustrate the relationship between subsetting and clipping spatial data, we will subset points that cover the bounding box of the circles x and y in Figure 4.5. Some points will be inside just one circle, some will be inside both and some will be inside neither. To generate the points will use a function not yet covered in this book, st_sample(). There are two different ways to subset points that fit into combinations of the circles: via clipping and logical operators. But first we must generate some points. We will use the simple random sampling strategy to sample from a box representing the extent of x and y, using the code below to generate the situation plotted in Figure 4.6: bb = st_bbox(st_union(x, y)) pmat = matrix(c(bb[c(1, 2, 3, 2, 3, 4, 1, 4, 1, 2)]), ncol = 2, byrow = TRUE) box = st_polygon(list(pmat)) set.seed(2017) p = st_sample(x = box, size = 10) plot(box) plot(x, add = T) plot(y, add = T) plot(p, add = T) text(x = c(-0.5, 1.5), y = 1, labels = l) Figure 4.6: Randomly distributed points within the bounding box enclosing circles x and y. 4.5.4 Exercises Write code that subsets points that are contained within x and y (illustrated by the plot in the 2nd row and the 1st column in Figure 4.5). Create a randomly located point with the command st_point() (refer back to section 2.1.4.2 to see how to create spatial data ‘from scratch’). Write code that uses functions aggregate() and st_buffer() to answers the following question: What proportion of the world’s population lives in countries that intersect a circle with a 10 degree radius of the intersection between the equator and the 9th meridian? (Advanced challenge: find the point with the highest number of people within a 10 degree radius.) center9 = st_sf(st_sfc(st_point(c(-9, 0)), crs = 4326)) buff9 = st_buffer(center9, dist = 10) #&gt; Warning in st_buffer.sfc(st_geometry(x), dist, nQuadSegs): st_buffer does #&gt; not correctly buffer longitude/latitude data, dist needs to be in decimal #&gt; degrees. agg9 = aggregate(world[&quot;pop&quot;], buff9, FUN = sum) #&gt; although coordinates are longitude/latitude, it is assumed that they are planar agg9$pop / sum(world$pop, na.rm = TRUE) #&gt; [1] 0.00998 Assuming that people are evenly distributed across countries, estimate the population living within the circle created to answer the previous question. interp9 = st_interpolate_aw(x = world[&quot;pop&quot;], to = buff9, extensive = TRUE) #&gt; Warning in st_interpolate_aw(x = world[&quot;pop&quot;], to = buff9, extensive = #&gt; TRUE): st_interpolate_aw assumes attributes are constant over areas of x References "],
["read-write.html", "5 Geographic data I/O 5.1 Data Input (I) 5.2 Data output (O) 5.3 File formats 5.4 Visual outputs 5.5 Exercises", " 5 Geographic data I/O The previous chapters provided an overview of spatial data classes in R, with a focus on simple features. This chapter is about getting spatial data onto your computer and then, perhaps after processing it with techniques described in this book, back out to the world. We include a section (5.4) on visualization because outputting data in a human (not just computer) readable format enables non-programmers to benefit from your work. If your aim is to use geocomputation to improve the world, e.g. by encouraging evidence-based policies, this final stage is vital. I/O is short for “input/output” which means, in plain English, “reading and writing data”. We use the acronym instead of plain English not to confuse you or to make chapter names short, but because that’s the term used in computer science and it is useful to think of data import and export from a computing perspective.25 5.1 Data Input (I) To efficiently read data into R, it helps to have an understanding of what happens ‘under the hood’. Executing commands such as sf::st_read() (the main function we use for loading spatial data, from the sf package) or readr::read_csv() silently sets off a chain of events that loads objects. “Loading” in this context means loading the data into R or, more precisely, assigning objects to your workspace, stored in RAM accessible from the .GlobalEnv of your current R session. Spatial data comes in a wide variety of file formats, and sf is able to handle most of them via its st_read() command. Behind the scenes it uses GDAL, which supports the import of a very wide range of spatial data formats. The first argument of st_read() is file, which should be a text string or an object containing a single text string: library(sf) #&gt; Linking to GEOS 3.5.0, GDAL 2.1.0, proj.4 4.8.0 f = system.file(&quot;shapes/world.gpkg&quot;, package = &quot;spData&quot;) world = st_read(f) #&gt; Reading layer `wrld.gpkg&#39; from data source `/home/travis/R/Library/spData/shapes/world.gpkg&#39; using driver `GPKG&#39; #&gt; Simple feature collection with 177 features and 10 fields #&gt; geometry type: MULTIPOLYGON #&gt; dimension: XY #&gt; bbox: xmin: -180 ymin: -90 xmax: 180 ymax: 83.64513 #&gt; epsg (SRID): 4326 #&gt; proj4string: +proj=longlat +datum=WGS84 +no_defs Tip: read_sf() and write_sf() can be used as easy-to-remember alternatives to st_read() and st_write(). Remember they hide information about the data source and overwrite existing data, though. A major advantage of sf is that it is fast. To demonstrate this, we will use a function to compare st_read with its sp equivalent, rgdal::readOGR: bench_read = function(file, n) { m = microbenchmark(times = n, rgdal::readOGR(f), st_read(f) ) mean(m$time[1:n]) / mean(m$time[(n + 1):(n * 2)]) } This function takes as arguments an input file (file) and a number of times to run each command (n) and returns how many times faster st_read() is than readOGR(). Let’s run the benchmark for the world.gpkg file represented by the object f: library(microbenchmark) read_world_gpkg = bench_read(file = f, n = 5) read_world_gpkg #&gt; [1] 2.3 The results demonstrate that sf was around 2 times faster than rgdal at reading-in the world countries shapefile. The relative performance of st_read() compared with other functions will vary depending on file format and the nature of the data. To illustrate this point, we performed the same operation on a geojson file and found a greater speed saving: f = system.file(&quot;shapes/cycle_hire_osm.geojson&quot;, package = &quot;spData&quot;) read_lnd_geojson = bench_read(file = f, n = 5) read_lnd_geojson #&gt; [1] 3.32 In this case sf was around 3 times faster than rgdal. To find out which data formats sf supports, run st_drivers(). Here, we show only the first two drivers: sf_drivers = st_drivers() head(sf_drivers, n = 2) #&gt; name long_name write copy is_raster is_vector #&gt; PCIDSK PCIDSK PCIDSK Database File TRUE FALSE TRUE TRUE #&gt; netCDF netCDF Network Common Data Format TRUE TRUE TRUE TRUE 5.2 Data output (O) The counterpart of st_read() is st_write(). It allows to write sf objects to a wide range of geographic vector file formats, including the most common ones such as .geojson, .shp and .gpkg. Based on the file name st_write() decides automatically which driver to use. How fast the writing process is depends also on the driver: system.time(st_write(world, &quot;world.geojson&quot;, quiet = TRUE)) #&gt; user system elapsed #&gt; 0.060 0.000 0.061 system.time(st_write(world, &quot;world.shp&quot;, quiet = TRUE)) #&gt; user system elapsed #&gt; 0.04 0.00 0.04 system.time(st_write(world, &quot;world.gpkg&quot;, quiet = TRUE)) #&gt; user system elapsed #&gt; 0.020 0.004 0.028 Note: if you try to write to the same data source again, the function will fail. This is demonstrated in the code below for a modified version of the world in which the population doubles in all countries (don’t worry about the dplyr code for now, this is covered in Chapter 3): world_mod = dplyr::mutate(world, pop = pop * 2) st_write(obj = world_mod, dsn = &quot;world.gpkg&quot;) ## GDAL Error 1: Layer world.gpkg already exists, CreateLayer failed. ## Use the layer creation option OVERWRITE=YES to replace it. The error message (only partly reproduced above) provides some information as to why the function failed. The GDAL Error 1 statement makes clear that the failure occurred at the GDAL level. Additionally, the suggestion to use OVERWRITE=YES provides a clue how to fix the problem. However, this is a GDAL option, and not a st_write() argument. Luckily, st_write provides a layer_options argument through which we can pass driver-dependent options: st_write(obj = world_mod, dsn = &quot;world.gpkg&quot;, layer_options = &quot;OVERWRITE=YES&quot;) Another solution is to use the st_write() argument delete_layer. Setting it to TRUE deletes already existing layers in the data source before the function attempts to write (note there is also a delete_dsn argument): st_write(obj = world_mod, dsn = &quot;world.gpkg&quot;, delete_layer = TRUE) You can achieve the same with write_sf() since it is equivalent to (technically an alias for) st_write(), except that its defaults for delete_layer and quiet is TRUE. This enables spatial data to be overwritten more concisely, and with less output going to screen: write_sf(obj = world_mod, dsn = &quot;world.gpkg&quot;) A blunter way to update file-based geographic data sources such as .gpkg files is to simply delete them. This is not generally recommended, as it will not work for multi-file data sources such as .shp files: file.remove(&quot;world.gpkg&quot;) 5.3 File formats 5.4 Visual outputs 5.5 Exercises Name three differences between write_sf() and the more well-known function st_write(). What are the default arguments of read_sf() and write_sf() that enable two of these differences? Concepts such as computational efficiency, hard disk space and ‘idempotence’ are useful when thinking about reading and writing geographic datasets, which can become large and difficult to handle. Loading/saving data is yet another way of saying the same thing.↩ "],
["references.html", "6 References", " 6 References "]
]
